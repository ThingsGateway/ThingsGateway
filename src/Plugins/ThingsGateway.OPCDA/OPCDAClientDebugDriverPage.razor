@*
//------------------------------------------------------------------------------
//  此代码版权声明为全文件覆盖，如有原作者特别声明，会在下方手动补充
//  此代码版权（除特别声明外的代码）归作者本人Diego所有
//  源代码使用协议遵循本仓库的开源协议及附加协议
//  Gitee源代码仓库：https://gitee.com/diego2098/ThingsGateway
//  Github源代码仓库：https://github.com/kimdiego2098/ThingsGateway
//  使用文档：https://diego2098.gitee.io/thingsgateway/
//  QQ群：605534569
//------------------------------------------------------------------------------
*@

@using BlazorComponent;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.JSInterop;
@using ThingsGateway.Core;
@using ThingsGateway.Foundation;
@using ThingsGateway.Foundation.Adapter.OPCDA.Da;
@using ThingsGateway.Foundation.Extension;
@using ThingsGateway.Foundation.Serial;
@using ThingsGateway.Web.Foundation;
@using Masa.Blazor
@using TouchSocket.Core;
@inherits DriverDebugUIBase
<OPCDAClientPage @ref=tcpClientPage></OPCDAClientPage>

<MCard Class="pa-4" Flat Elevation="0">
    <MRow Class="my-1" NoGutters>

        <MCol Md="4">
            <MCard Flat Elevation="0">
                <MCol Class="my-1 py-1">
                    <MTextField Class="mx-1 my-1" Label="变量地址" Dense Outlined HideDetails="@("auto")" @bind-Value=@address />
                    <MRow NoGutters>
                        <MButton Class="mx-1 my-1" Color="primary" OnClick="Add">
                            添加
                        </MButton>
                        <MButton Class="mx-1 my-1" Color="primary" OnClick="Remove">
                            移除
                        </MButton>
                    </MRow>



                    <MButton Class="mx-1 my-1" Color="primary" OnClick="Read">
                        组读取
                    </MButton>
                    <MTextField Class="mx-1 mt-3 my-1" Label="值" Dense Outlined HideDetails="@("auto")" @bind-Value=@writeValue />
                    <MButton Class="mx-1 my-1" Color="primary" OnClick="Write">
                        写入
                    </MButton>

                </MCol>
            </MCard>
        </MCol>

        <MCol Md="8">


            <MCard Height=@("calc(100vh - 420px)") Style="overflow-y:auto;width:100%" Elevation="0" Flat Class="ml-4">
                <MCardActions>
                    输出日志
                    <MSpacer></MSpacer>

                    <MTooltip Bottom Context="tip">
                        <ActivatorContent>
                            <MButton Loading=isDownExport Class="mx-2" @attributes="@tip.Attrs" Dark Fab Small
                                     OnClick=@(async()=>
                                     {
                                     await DownDeviceMessageExport(Messages.Select(a=>a.message));
                                     }
                                     )>
                                <MIcon>mdi-export</MIcon>
                            </MButton>
                        </ActivatorContent>
                        <ChildContent>
                            <span>导出</span>
                        </ChildContent>
                    </MTooltip>

                </MCardActions>
                @{
                    var item = Messages;
                    <MRow Class="ml-2 mr-2 d-flex" NoGutters>
                        <MVirtualScroll Context="itemMessage" Height=@("calc(100vh - 500px)") OverscanCount=2 ItemSize="200" Items="item.OrderByDescending(a=>a.id).ToList()">
                            <ItemContent>
                                <div title=@itemMessage.message class=@(itemMessage.isRed==null?" black--text ":itemMessage.isRed==true?" red--text ":"green--text ") style="white-space: nowrap !important;overflow: hidden !important; text-overflow: ellipsis !important;">
                                    @itemMessage.message
                                </div>

                            </ItemContent>
                        </MVirtualScroll>
                    </MRow>
                }
            </MCard>
        </MCol>

    </MRow>

</MCard>


@code
{
    private OPCDAClientPage tcpClientPage;
    private ThingsGateway.Foundation.Adapter.OPCDA.OPCDAClient _plc;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            tcpClientPage.LogAction = LogOut;
            tcpClientPage.ValueAction = ValueOut;
            //载入配置
            _plc = tcpClientPage.OPC;
            StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }
    private void ValueOut(List<ItemReadResult> values)
    {
        Messages.Add((Yitter.IdGenerator.YitIdHelper.NextId(), null, values.ToJson().FormatJson()));
        if (Messages.Count > 2500)
        {
            Messages.RemoveRange(0, 2000);
        }
    }

    private void Add()
    {
        var tags = new Dictionary<string, List<OpcItem>>();
        var tag = new OpcItem(address);
        tags.Add(Yitter.IdGenerator.YitIdHelper.NextId().ToString(), new List<OpcItem>() { tag });
        _plc.AddTags(tags);
    }
    private void Remove()
    {
        _plc.RemoveTags(new List<string>() { address });
    }
    public override Task Read()
    {
        var data = _plc.ReadSub();
        if (data.IsSuccess)
        {
        }
        else
        {
            Messages.Add((Yitter.IdGenerator.YitIdHelper.NextId(), true, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss ffff") + " - " + data.Message));
        }
        return Task.CompletedTask;
    }

    public override Task Write()
    {
        try
        {
            var data = _plc.Write(address, writeValue);
            if (data.IsSuccess)
            {
                Messages.Add((Yitter.IdGenerator.YitIdHelper.NextId(), false, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss ffff") + " - 写入" + data.Message));
            }
            else
            {
                Messages.Add((Yitter.IdGenerator.YitIdHelper.NextId(), true, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss ffff") + " - " + data.Message));
            }
        }
        catch (Exception ex)
        {
            Messages.Add((Yitter.IdGenerator.YitIdHelper.NextId(), true, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss ffff") + " - " + "写入失败：" + ex.Message));
        }
        return Task.CompletedTask;
    }
    public override void Dispose()
    {
        _plc.SafeDispose();
        tcpClientPage.SafeDispose();
        base.Dispose();
    }
    public override string ToString()
    {
        return nameof(OPCDAClient);
    }
}