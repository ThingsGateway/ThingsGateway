@using BlazorComponent;
@using Microsoft.AspNetCore.Components.Web;
@using System.IO.Ports;
@using System.Collections.Concurrent;
@using ThingsGateway.Core;
@using ThingsGateway.Foundation;
@using ThingsGateway.Foundation.Serial;
@using ThingsGateway.Web.Foundation;
@using Masa.Blazor
@implements IDisposable
<MCard Class="pa-4" Flat Elevation="0" Rounded="false">
    <MRow Justify="JustifyTypes.SpaceBetween" Align="AlignTypes.Center">
        <MTextField Class="mx-1" Label="IP地址" Dense Outlined HideDetails="@("auto")" @bind-Value=@ip />
        <MTextField Class="mx-1" Label="端口" Dense Outlined HideDetails="@("auto")" @bind-Value=@port />

        <MButton Class="mx-1" OnClick=@(async() =>
                 {
                 tgTcpClient.Close();
                 await GetTGTcpClient().ConnectAsync();
                 }
                 ) Color="primary">
            连接
        </MButton>
        <MButton Class="mx-1" OnClick=@(() =>
                 {
                 tgTcpClient.Close();
                 }
                 ) Color="red">
            断开
        </MButton>
    </MRow>



</MCard>
@code
{
    public void Dispose()
    {
        tgTcpClient.SafeDispose();
    }
    private string ip="127.0.0.1";
    private int port=502;
    private TGTcpClient tgTcpClient { get; set; } = new();
    private TouchSocketConfig config;
    public Action<string> LogAction;

    private void LogOut(string str)
    {
        LogAction?.Invoke(str);
    }
    protected override void OnInitialized()
    {
        config = new TouchSocketConfig();
        var logMessage = new TouchSocket.Core.LoggerGroup();
        logMessage.AddLogger(new EasyLogger(LogOut));
        config.ConfigureContainer(a => a.RegisterSingleton<ILog>(logMessage));
        config.SetRemoteIPHost(new IPHost(ip + ":" + port)).SetBufferLength(300);
        tgTcpClient = config.Container.Resolve<TGTcpClient>();
        base.OnInitialized();

    }
    public TGTcpClient GetTGTcpClient()
    {
        config = new TouchSocketConfig();
        var logMessage = new TouchSocket.Core.LoggerGroup();
        logMessage.AddLogger(new EasyLogger(LogOut));
        config.ConfigureContainer(a => a.RegisterSingleton<ILog>(logMessage));
        config.SetRemoteIPHost(new IPHost(ip + ":" + port)).SetBufferLength(300);
        //载入配置
        tgTcpClient.Setup(config);
        return tgTcpClient;
    }


}