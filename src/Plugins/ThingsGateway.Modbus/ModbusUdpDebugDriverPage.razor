@using BlazorComponent;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.JSInterop;
@using ThingsGateway.Core;
@using ThingsGateway.Foundation.Adapter.Modbus;
@using ThingsGateway.Foundation;
@using ThingsGateway.Foundation.Extension;
@using ThingsGateway.Foundation.Serial;
@using ThingsGateway.Web.Foundation;
@using Masa.Blazor
@inherits DriverDebugUIBase
<UdpSessionPage @ref=udpClientPage></UdpSessionPage>
@if (_plc != null)
{
    <MCard Flat Elevation="0">
        <MRow Class="my-1" NoGutters Justify="JustifyTypes.SpaceBetween" Align="AlignTypes.Center">
            <MCheckbox Class="mx-1" Label=@(_plc.Description(x => x.IsCheckMessageId)) Dense Outlined HideDetails="@("auto")" @bind-Value=@_plc.IsCheckMessageId></MCheckbox>
            <MTextField Class="mx-1" Label=@(_plc.Description(x => x.FrameTime)) Dense Outlined HideDetails="@("auto")" @bind-Value=@_plc.FrameTime></MTextField>

            <MTextField Class="mx-1" Label=@(_plc.Description(x => x.Station)) Dense Outlined HideDetails="@("auto")" @bind-Value=@_plc.Station></MTextField>
            <MTextField Class="mx-1" Label=@(_plc.Description(x => x.TimeOut)) Dense Outlined HideDetails="@("auto")" @bind-Value=@_plc.TimeOut></MTextField>
            <MSelect Class="mx-1" Style="max-width:200px" @bind-Value="_plc.DataFormat" Outlined Label="@(_plc.Description(x => x.DataFormat))"
                     Items=@(typeof(DataFormat).GetEnumList())
                     MenuProps="@(props => { props.Auto = true; props.OffsetY = true; })"
                     ItemText=@((u) =>u.des)
                     ItemValue=@(u =>(DataFormat)u.value)
                     HideDetails=@("auto") Height="30"
                  Dense>
        </MSelect>
    </MRow>
</MCard>

}
<MCard Class="pa-4" Flat Elevation="0">
    <MRow Class="my-1" NoGutters>

        <MCol Md="4">
            <MCard Flat Elevation="0">
                <MCol Class="my-1 py-1">
                    <MTextField Class="mx-1 my-1" Label="变量地址" Dense Outlined HideDetails="@("auto")" @bind-Value=@address />
                    <MTextField Class="mx-1 my-1" Label="长度" Dense Outlined HideDetails="@("auto")" @bind-Value=@length />
                    <MSelect Class="mx-1 my-1" Style="max-width:200px" @bind-Value="dataTypeEnum" Outlined Label="数据类型"
                             Items=@(typeof(DataTypeEnum).GetEnumList())
                             MenuProps="@(props => { props.Auto = true; props.OffsetY = true; })"
                             ItemText=@((u) =>u.des)
                             ItemValue=@(u =>(DataTypeEnum)u.value)
                             HideDetails=@("auto") Height="30"
                             Dense>
                    </MSelect>

                    <MButton Class="mx-1 my-1" Color="primary" OnClick="Read">
                        读取
                    </MButton>
                    <MTextField Class="mx-1 mt-3 my-1" Label="值" Dense Outlined HideDetails="@("auto")" @bind-Value=@writeValue />
                    <MButton Class="mx-1 my-1" Color="primary" OnClick="Write">
                        写入
                    </MButton>

                </MCol>
            </MCard>
        </MCol>

        <MCol Md="8">


            <MCard Height=@("calc(100vh - 420px)") Style="overflow-y:auto;width:100%" Elevation="0" Flat Class="ml-4">
                <MCardActions>
                    输出日志
                    <MSpacer></MSpacer>

                    <MTooltip Bottom Context="tip">
                        <ActivatorContent>
                            <MButton Loading=isDownExport Class="mx-2" @attributes="@tip.Attrs" Dark Fab Small
                                     OnClick=@(async()=>
                                     {
                                     await DownDeviceMessageExport(Messages.Select(a=>a.message));
                                     }
                                     )>
                                <MIcon>mdi-export</MIcon>
                            </MButton>
                        </ActivatorContent>
                        <ChildContent>
                            <span>导出</span>
                        </ChildContent>
                    </MTooltip>

                </MCardActions>
                @{
                    var item = Messages;
                    <MRow Class="ml-2 mr-2 d-flex" NoGutters>
                        <MVirtualScroll Context="itemMessage" Height=@("calc(100vh - 500px)") OverscanCount=2 ItemSize="100" Items="item.OrderByDescending(a=>a.id).ToList()">
                            <ItemContent>
                                <div class=@(itemMessage.isRed==null?"black--text":itemMessage.isRed==true?"red--text":"green--text")>
                                    @itemMessage.message
                                </div>

                            </ItemContent>
                        </MVirtualScroll>
                    </MRow>
                }
            </MCard>
        </MCol>

    </MRow>

</MCard>


@code
{
    private UdpSessionPage udpClientPage;
    private ThingsGateway.Foundation.Adapter.Modbus.ModbusUdp _plc
    {
        get
        {
            return plc as ThingsGateway.Foundation.Adapter.Modbus.ModbusUdp;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            udpClientPage.LogAction = LogOut;
            //载入配置
            plc = new ThingsGateway.Foundation.Adapter.Modbus.ModbusUdp((TGUdpSession)udpClientPage.GetTGUdpSession());
            StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }


    public override void Dispose()
    {
        plc.SafeDispose();
        udpClientPage.SafeDispose();
        base.Dispose();
    }
    public override string ToString()
    {
        return nameof(ModbusUdp);
    }
}