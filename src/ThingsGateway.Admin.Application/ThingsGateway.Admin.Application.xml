<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThingsGateway.Admin.Application</name>
    </assembly>
    <members>
        <member name="T:ThingsGateway.Admin.Application.OperDescAttribute">
            <summary>
            Aop拦截器
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.OperDescAttribute._logMessageQueue">
            <summary>
            日志消息队列（线程安全）
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.OperDescAttribute.Description">
            <summary>
            说明，需配置本地化json文件
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.OperDescAttribute.IsRecordPar">
            <summary>
            是否记录进出参数
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.OperDescAttribute.ProcessQueue">
            <summary>
            将日志消息写入数据库中
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.OperDescAttribute.WriteToQueue(ThingsGateway.Admin.Application.SysOperateLog)">
            <summary>
            将日志消息写入队列中等待后台任务出队写入数据库
            </summary>
            <param name="logMsg">结构化日志消息</param>
        </member>
        <member name="T:ThingsGateway.Admin.Application.IgnoreExcelAttribute">
            <summary>
            忽略Excel导入导出
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.RolePermissionAttribute">
            <summary>
            需要角色授权权限
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.IgnoreRolePermissionAttribute">
            <summary>
            忽略角色授权权限
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.IgnoreSeedDataAddAttribute">
            <summary>
            种子数据忽略新增
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.IgnoreSeedDataUpdateAttribute">
            <summary>
            种子数据忽略修改
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.IgnoreInitTableAttribute">
            <summary>
            忽略初始化表
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.SuperAdminAttribute">
            <summary>
            管理员才能访问
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.IgnoreSuperAdminAttribute">
            <summary>
            忽略超级管理员才能访问特性
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.MinValueAttribute">
            <summary>
            最小值校验
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.MinValueAttribute.#ctor(System.Int32)">
            <summary>
            最小值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.MinValueAttribute.IsValid(System.Object)">
            <summary>
            最小值校验
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:ThingsGateway.Admin.Application.CacheConst.Cache_SysDict">
            <summary>
            系统字典表缓存Key
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.CacheConst.Cache_SysUser">
            <summary>
            用户表缓存Key
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.CacheConst.Cache_SysUserAccount">
            <summary>
            用户账号关系缓存Key
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.CacheConst.Cache_SysResource">
            <summary>
            资源表缓存Key
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.CacheConst.Cache_SysRelation">
            <summary>
            关系表缓存Key
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.CacheConst.Cache_SysRole">
            <summary>
            角色表缓存Key
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.CacheConst.Cache_LoginErrorCount">
            <summary>
             登录错误次数缓存Key
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.ClaimConst">
            <summary>
            授权用户常量
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.ClaimConst.Account">
            <summary>
            账号
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.ClaimConst.SuperAdmin">
            <summary>
            SuperAdmin
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.ClaimConst.UserId">
            <summary>
            用户Id
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.ClaimConst.VerificatId">
            <summary>
            验证Id
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.ResourceConst">
            <summary>
            资源表常量
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.ResourceConst.System">
            <summary>
            系统内置单页面编码
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.RoleConst">
            <summary>
            角色常量
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.RoleConst.SuperAdmin">
            <summary>
            超级管理员
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.RoleConst.BizAdmin">
            <summary>
            业务管理员
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.RoleConst.ApiRole">
            <summary>
            api角色
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.SqlSugarConst">
            <summary>
            SqlSugar系统常量
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.SqlSugarConst.DB_Admin">
            <summary>
            DB_Admin
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.SqlSugarConst.DB_Log">
            <summary>
            DB_Log
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.SqlSugarConst.DB_Custom">
            <summary>
            DB_Custom
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.CultureController">
            <summary>
            文化 Controller
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.CultureController.SetCulture(System.String,System.String)">
            <summary>
            设置文化方法
            </summary>
            <param name="culture"></param>
            <param name="redirectUri"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.CultureController.ResetCulture(System.String)">
            <summary>
            重置文化方法
            </summary>
            <param name="redirectUri"></param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Admin.Application.ResultFilter">
            <summary>
            规范化RESTful风格返回值
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ResultFilter.GetValidationMetadata(System.Object)">
            <summary>
            获取验证错误信息
            </summary>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ResultFilter.GetExceptionMetadata(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            获取异常元数据
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ResultFilter.ValidateProperty(System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult},System.String)">
            <summary>
            验证整个模型时验证属性方法
            </summary>
            <param name="context"></param>
            <param name="results"></param>
            <param name="pName"></param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ResultFilter.ValidateDataAnnotations(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult},System.Reflection.PropertyInfo,System.String)">
            <summary>
            通过属性设置的 DataAnnotation 进行数据验证
            </summary>
            <param name="value"></param>
            <param name="context"></param>
            <param name="results"></param>
            <param name="propertyInfo"></param>
            <param name="memberName"></param>
        </member>
        <member name="T:ThingsGateway.Admin.Application.IUnifyResultProvider">
            <summary>
            规范化结果提供器
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.IUnifyResultProvider.OnException(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            异常返回值
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.IUnifyResultProvider.OnSucceeded(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,System.Object)">
            <summary>
            成功返回值
            </summary>
            <param name="context"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.IUnifyResultProvider.OnValidateFailed(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,System.String)">
            <summary>
            验证失败返回值
            </summary>
            <param name="context"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.IUnifyResultProvider.OnResponseStatusCodes(Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            拦截返回状态码
            </summary>
            <param name="context"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Admin.Application.UnifyContext">
            <summary>
            规范化结果上下文
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.UnifyContext.EnabledUnifyHandler">
            <summary>
            是否启用规范化结果
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.UnifyContext.CheckSucceededNonUnify(System.Reflection.MethodInfo)">
            <summary>
            检查请求成功是否进行规范化处理
            </summary>
            <param name="method"></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.UnifyContext.CheckStatusCodeNonUnify(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            检查短路状态码（>=400）是否进行规范化处理
            </summary>
            <param name="context"></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
        </member>
        <member name="F:ThingsGateway.Admin.Application.UnifyContext.ResponseContentTypesOfNonUnify">
            <summary>
            跳过规范化处理的 Response Content-Type
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.UnifyContext.CheckHttpContextNonUnify(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            检查 HttpContext 是否进行规范化处理
            </summary>
            <param name="httpContext"></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.UnifyContext.CheckVaildResult(Microsoft.AspNetCore.Mvc.IActionResult,System.Object@)">
            <summary>
            检查是否是有效的结果（可进行规范化的结果）
            </summary>
            <param name="result"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Admin.Application.UnifyResult`1">
            <summary>
            全局返回结果
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ThingsGateway.Admin.Application.UnifyResult`1.Code">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.UnifyResult`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.UnifyResult`1.Msg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.UnifyResult`1.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.UnifyResultProvider">
            <summary>
            规范化RESTful风格返回值
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.UnifyResultProvider.OnException(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            异常返回
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.UnifyResultProvider.OnResponseStatusCodes(Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            状态码响应拦截
            </summary>
            <param name="context"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.UnifyResultProvider.OnSucceeded(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,System.Object)">
            <summary>
            成功返回
            </summary>
            <param name="context"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.UnifyResultProvider.OnValidateFailed(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,System.String)">
            <summary>
            验证失败返回
            </summary>
            <param name="context"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.UnifyResultProvider.RESTfulResult(System.Int32,System.Boolean,System.Object,System.Object)">
            <summary>
            返回 RESTful 风格结果集
            </summary>
            <param name="statusCode">状态码</param>
            <param name="succeeded">是否成功</param>
            <param name="data">数据</param>
            <param name="errors">错误信息</param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Admin.Application.GiteeController">
            <summary>
            Gitee WebHook
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.GiteeController.Webhook(System.String,Microsoft.Extensions.Configuration.IConfiguration,BootstrapBlazor.Components.IDispatchService{ThingsGateway.Core.GiteePostBody},ThingsGateway.Core.GiteePostBody)">
            <summary>
            Gitee Webhook
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.GiteeController.Webhook">
            <summary>
            Webhook 测试接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.GiteeController.Options">
            <summary>
            跨域握手协议
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Admin.Application.PrimaryIdEntity">
            <summary>
            主键id基类
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.PrimaryIdEntity.Id">
            <summary>
            主键Id
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.PrimaryKeyEntity">
            <summary>
            主键实体基类
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.PrimaryKeyEntity.ExtJson">
            <summary>
            拓展信息
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.BaseEntity">
            <summary>
            框架实体基类
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.BaseEntity.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.BaseEntity.CreateUser">
            <summary>
            创建人
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.BaseEntity.CreateUserId">
            <summary>
            创建者Id
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.BaseEntity.IsDelete">
            <summary>
            软删除
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.BaseEntity.UpdateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.BaseEntity.UpdateUser">
            <summary>
            更新人
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.BaseEntity.UpdateUserId">
            <summary>
            修改者Id
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.BaseEntity.SortCode">
             <summary>
             排序码
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysDict.DictType">
             <summary>
             类型
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysDict.Category">
             <summary>
             分类
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysDict.Name">
             <summary>
             名称
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysDict.Code">
             <summary>
             代码
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysDict.Remark">
             <summary>
             描述
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.SysOperateLog">
             <summary>
             操作日志表
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysOperateLog.Category">
             <summary>
             日志分类
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysOperateLog.Name">
             <summary>
             日志名称
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysOperateLog.ClassName">
             <summary>
             类名称
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysOperateLog.MethodName">
             <summary>
             方法名称
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysOperateLog.ParamJson">
             <summary>
             请求参数
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysOperateLog.ReqMethod">
             <summary>
             请求方式
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysOperateLog.ReqUrl">
             <summary>
             请求地址
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysOperateLog.ResultJson">
             <summary>
             返回结果
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysOperateLog.ExeMessage">
             <summary>
             具体消息
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysOperateLog.ExeStatus">
             <summary>
             执行状态
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysOperateLog.OpAccount">
             <summary>
             操作账号
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysOperateLog.OpBrowser">
             <summary>
             操作浏览器
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysOperateLog.OpIp">
             <summary>
             操作ip
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysOperateLog.OpOs">
             <summary>
             操作系统
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysOperateLog.OpTime">
             <summary>
             操作时间
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysOperateLog.VerificatId">
             <summary>
             验证Id
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.SysRelation">
             <summary>
             系统关系表
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysRelation.Category">
             <summary>
             分类
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysRelation.ObjectId">
             <summary>
             对象ID
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysRelation.TargetId">
             <summary>
             目标ID
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.SysResource">
             <summary>
             系统资源表
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysResource.ParentId">
             <summary>
             父id
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysResource.Module">
             <summary>
             模块
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysResource.Title">
             <summary>
             标题
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysResource.Icon">
             <summary>
             图标
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysResource.Code">
             <summary>
             编码
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysResource.Category">
             <summary>
             分类
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysResource.Target">
             <summary>
             目标类型
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysResource.NavLinkMatch">
            <summary>
            菜单匹配类型
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysResource.Href">
             <summary>
             路径
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysResource.Children">
            <summary>
            子节点
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.SysRole">
             <summary>
             系统角色表
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysRole.Code">
             <summary>
             编码
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysRole.Name">
             <summary>
             名称
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysRole.Category">
             <summary>
             分类
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.SysUser">
             <summary>
             系统用户表
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.Avatar">
             <summary>
             头像
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.Account">
             <summary>
             账号
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.Password">
             <summary>
             密码
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.Status">
             <summary>
             是否启用
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.Phone">
             <summary>
             手机
             这里使用了SM4自动加密解密
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.Email">
             <summary>
             邮箱
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.LastLoginIp">
             <summary>
             上次登录ip
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.LastLoginDevice">
             <summary>
             上次登录设备
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.LastLoginTime">
             <summary>
             上次登录时间
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.LastLoginAddress">
             <summary>
             上次登录地点
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.LatestLoginIp">
             <summary>
             最新登录ip
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.LatestLoginTime">
             <summary>
             最新登录时间
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.LatestLoginDevice">
             <summary>
             最新登录设备
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.LatestLoginAddress">
             <summary>
             最新登录地点
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.DefaultModule">
             <summary>
             默认模块
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.ButtonCodeList">
            <summary>
            按钮码集合
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.PermissionCodeList">
            <summary>
            权限码集合
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.RoleCodeList">
            <summary>
            角色码集合
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.RoleIdList">
            <summary>
            角色ID集合
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.DataScopeList">
            <summary>
            数据范围集合
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SysUser.ModuleList">
            <summary>
            模块集合
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.DataScope">
            <summary>
            数据范围类
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.DataScope.ApiUrl">
            <summary>
            API接口
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.AuthDeviceTypeEnum">
            <summary>
            登录设备类型枚举
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.AuthDeviceTypeEnum.PC">
            <summary>
            PC端
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.AuthDeviceTypeEnum.APP">
            <summary>
            移动端
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.DictTypeEnum">
            <summary>
            字典表类型
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.DictTypeEnum.System">
            <summary>
            系统使用
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.DictTypeEnum.Define">
            <summary>
            用户自定义
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.UserFriendlyException">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.LocalizerExtensions.TryGetLocalizerString(Microsoft.Extensions.Localization.IStringLocalizer,System.String,System.String@)">
            <summary>
            获取指定 Type 的资源文件
            </summary>
            <param name="localizer"></param>
            <param name="key"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.LocalizerExtensions.GetDisplayName(System.Type)">
            <summary>
            获得类型自身的描述信息
            </summary>
            <param name="modelType"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.LocalizerExtensions.GetDisplayName(System.Type,System.String)">
            <summary>
            获得类型属性的描述信息
            </summary>
            <param name="modelType"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.LocalizerExtensions.GetMethodDisplayName(System.Type,System.String)">
            <summary>
            获得方法的描述信息
            </summary>
            <param name="modelType"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Admin.Application.ObjectExtensions">
            <summary>
            对象拓展类
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.ConvertToDateTime(System.DateTimeOffset)">
            <summary>
            将 DateTimeOffset 转换成本地 DateTime
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.ConvertToDateTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            将 DateTimeOffset? 转换成本地 DateTime?
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.ConvertToDateTimeOffset(System.DateTime)">
            <summary>
            将 DateTime 转换成 DateTimeOffset
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.ConvertToDateTimeOffset(System.Nullable{System.DateTime})">
            <summary>
            将 DateTime? 转换成 DateTimeOffset?
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.ConvertToDateTime(System.Int64)">
            <summary>
            将时间戳转换为 DateTime
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.ToByteArray(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            将 IFormFile 转换成 byte[]
            </summary>
            <param name="formFile"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.CopyToSave(System.IO.Stream,System.String)">
            <summary>
            将流保存到本地磁盘
            </summary>
            <param name="stream"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.CopyToSave(System.Byte[],System.String)">
            <summary>
            将字节数组保存到本地磁盘
            </summary>
            <param name="bytes"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.CopyToSaveAsync(System.IO.Stream,System.String)">
            <summary>
            将流保存到本地磁盘
            </summary>
            <param name="stream"></param>
            <param name="path">需包含文件名完整路径</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.CopyToSaveAsync(System.Byte[],System.String)">
            <summary>
            将字节数组保存到本地磁盘
            </summary>
            <param name="bytes"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.IsRichPrimitive(System.Type)">
            <summary>
            判断是否是富基元类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.AddOrUpdate``1(System.Collections.Generic.Dictionary{System.String,``0},System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            合并两个字典
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dic">字典</param>
            <param name="newDic">新字典</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.AddOrUpdate``1(System.Collections.Concurrent.ConcurrentDictionary{System.String,``0},System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            合并两个字典
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dic">字典</param>
            <param name="newDic">新字典</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.IsValueTuple(System.Type)">
            <summary>
            判断是否是元组类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            判断方法是否是异步
            </summary>
            <param name="method">方法</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.IsAnonymous(System.Object)">
            <summary>
            判断是否是匿名类型
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.GetAncestorTypes(System.Type)">
            <summary>
            获取所有祖先类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.GetRealReturnType(System.Reflection.MethodInfo)">
            <summary>
            获取方法真实返回类型
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.ChangeType``1(System.Object)">
            <summary>
            将一个对象转换为指定类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.ChangeType(System.Object,System.Type)">
            <summary>
            将一个对象转换为指定类型
            </summary>
            <param name="obj">待转换的对象</param>
            <param name="type">目标类型</param>
            <returns>转换后的对象</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.GetFoundAttribute``1(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="method"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.Format(System.String,System.Object[])">
            <summary>
            格式化字符串
            </summary>
            <param name="str"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.SplitCamelCase(System.String)">
            <summary>
            切割骆驼命名式字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.ToObject(System.Text.Json.JsonElement)">
            <summary>
            JsonElement 转 Object
            </summary>
            <param name="jsonElement"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.ClearStringAffixes(System.String,System.Int32,System.String[])">
            <summary>
            清除字符串前后缀
            </summary>
            <param name="str">字符串</param>
            <param name="pos">0：前后缀，1：后缀，-1：前缀</param>
            <param name="affixes">前后缀集合</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.ToLowerCamelCase(System.String)">
            <summary>
            首字母小写
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.ToUpperCamelCase(System.String)">
            <summary>
            首字母大写
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断集合是否为空
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合对象</param>
            <returns><see cref="T:System.Boolean" /> 实例，true 表示空集合，false 表示非空集合</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ObjectExtensions.GetTypeAttribute``1(System.Type,System.Boolean)">
            <summary>
            获取类型自定义特性
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="type">类类型</param>
            <param name="inherit">是否继承查找</param>
            <returns>特性对象</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.QueryPageOptionsExtensions.GetQuery``1(SqlSugar.SqlSugarClient,BootstrapBlazor.Components.QueryPageOptions)">
            <summary>
            根据查询条件返回sqlsugar ISugarQueryable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.QueryPageOptionsExtensions.GetData``1(System.Collections.Generic.IEnumerable{``0},BootstrapBlazor.Components.QueryPageOptions)">
            <summary>
            根据查询条件返回IEnumerable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="datas"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.QueryPageOptionsExtensions.GetQueryData``1(System.Collections.Generic.IEnumerable{``0},BootstrapBlazor.Components.QueryPageOptions)">
            <summary>
            根据查询条件返回QueryData
            </summary>
            <typeparam name="T"></typeparam>
            <param name="datas"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SqlSugarExtensions.ToPagedList``2(SqlSugar.ISugarQueryable{``0},System.Int32,System.Int32)">
            <summary>
            SqlSugar分页扩展,查询出结果后再转换实体类
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SqlSugarExtensions.ToPagedListAsync``2(SqlSugar.ISugarQueryable{``0},System.Int32,System.Int32)">
            <summary>
            SqlSugar分页扩展,查询出结果后再转换实体类
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SqlSugarExtensions.ToPagedList``2(SqlSugar.ISugarQueryable{``0},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            SqlSugar分页扩展，查询前扩展转换实体类
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SqlSugarExtensions.ToPagedListAsync``2(SqlSugar.ISugarQueryable{``0},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            SqlSugar分页扩展，查询前扩展转换实体类
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.StartupExtensions.ConfigureServices(Microsoft.Extensions.Hosting.IHostApplicationBuilder)">
            <summary>
            反射获取所有AppStartup的继承类，执行名称为第一个参数是<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />的方法
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.StartupExtensions.UseServices(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            ConfigureServices获取的全部实例中，执行名称为第一个参数是<see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />的方法
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.StartupExtensions.AddStartups(Microsoft.Extensions.Hosting.IHostApplicationBuilder)">
            <summary>
            添加 Startup 自动扫描
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.StartupExtensions.UseStartups(System.Collections.Generic.IEnumerable{ThingsGateway.Admin.Application.AppStartup},Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            批量将自定义 AppStartup 添加到 Startup.cs 的 Configure 中
            </summary>
            <param name="startups"></param>
            <param name="app"></param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.StartupExtensions.GetStartupOrder(System.Type)">
            <summary>
            获取 Startup 排序
            </summary>
            <param name="type">排序类型</param>
            <returns>int</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.StartupExtensions.ResolveMethodParameterInstances(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Reflection.MethodInfo)">
            <summary>
            解析方法参数实例
            </summary>
            <param name="app"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Admin.Application.AppStartupAttribute">
            <summary>
            注册服务启动配置
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AppStartupAttribute.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="order"></param>
        </member>
        <member name="P:ThingsGateway.Admin.Application.AppStartupAttribute.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.LiteDBCache`1">
            <summary>
            缓存帮助类
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.LiteDBCacheUtil.GetCache``1(System.String,System.String)">
            <summary>
            获取缓存链接
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.DatabaseLoggingWriter">
            <summary>
            数据库写入器
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.DatabaseLoggingWriter.WriteAsync(ThingsGateway.Logging.LogMessage,System.Boolean)">
            <summary>
            此方法只会写入经由MVCFilter捕捉的方法日志，对于BlazorServer的内部操作，由<see cref="T:ThingsGateway.Admin.Application.OperDescAttribute" />执行
            </summary>
            <param name="logMsg"></param>
            <param name="flush"></param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.DatabaseLoggingWriter.CreateOperationLog(System.String,System.String,ThingsGateway.Admin.Application.LoggingMonitorJson,UAParser.ClientInfo,System.Boolean)">
            <summary>
            创建操作日志
            </summary>
            <param name="operation">操作名称</param>
            <param name="path">请求地址</param>
            <param name="loggingMonitor">loggingMonitor</param>
            <param name="clientInfo">客户端信息</param>
            <param name="flush"></param>
            <returns></returns>
        </member>
        <member name="F:ThingsGateway.Admin.Application.DatabaseLoggingWriter._operateLogMessageQueue">
            <summary>
            日志消息队列（线程安全）
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.DatabaseLoggingWriter.CreateVisitLog(System.String,System.String,ThingsGateway.Admin.Application.LoggingMonitorJson,UAParser.ClientInfo,System.Boolean)">
            <summary>
            创建访问日志
            </summary>
            <param name="operation">访问类型</param>
            <param name="path"></param>
            <param name="loggingMonitor">loggingMonitor</param>
            <param name="clientInfo">客户端信息</param>
            <param name="flush"></param>
        </member>
        <member name="T:ThingsGateway.Admin.Application.LoggingConst">
            <summary>
            日志常量
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.LoggingConst.CateGory">
            <summary>
            分类
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.LoggingConst.Client">
            <summary>
            客户端信息
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.LoggingConst.Method">
            <summary>
            请求方法：POST/GET
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.LoggingConst.Operation">
            <summary>
            操作名称
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.LoggingConst.Path">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.AuthorizationClaims">
            <summary>
            认证信息
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.AuthorizationClaims.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.AuthorizationClaims.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.LogException">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LogException.Message">
            <summary>
            异常内容
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LogException.StackTrace">
            <summary>
            堆栈信息
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LogException.Type">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.LoggingMonitorJson">
            <summary>
            请求信息格式化
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoggingMonitorJson.ActionName">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoggingMonitorJson.AuthorizationClaims">
            <summary>
            认证信息
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoggingMonitorJson.ControllerName">
            <summary>
            控制器名
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoggingMonitorJson.DisplayName">
            <summary>
            类名称
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoggingMonitorJson.Environment">
            <summary>
            环境
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoggingMonitorJson.Exception">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoggingMonitorJson.HttpMethod">
            <summary>
            请求方法
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoggingMonitorJson.LocalIPv4">
            <summary>
            服务端
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoggingMonitorJson.LogDateTime">
            <summary>
            日志时间
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoggingMonitorJson.OsArchitecture">
            <summary>
            系统架构
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoggingMonitorJson.OsDescription">
            <summary>
            系统名称
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoggingMonitorJson.Parameters">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoggingMonitorJson.RemoteIPv4">
            <summary>
            客户端IPV4地址
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoggingMonitorJson.RequestHeaderAuthorization">
            <summary>
            认证信息
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoggingMonitorJson.RequestHeaderCookies">
            <summary>
            认证信息
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoggingMonitorJson.RequestUrl">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoggingMonitorJson.ReturnInformation">
            <summary>
            返回信息
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoggingMonitorJson.UserAgent">
            <summary>
            浏览器标识
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoggingMonitorJson.Validation">
            <summary>
            验证错误信息
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.Parameters">
            <summary>
            请求参数
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.Parameters.Name">
            <summary>
            参数名
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.Parameters.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.ReturnInformation">
            <summary>
            返回信息
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.ReturnInformation.Value">
            <summary>
            返回值
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.Validation">
            <summary>
            验证失败信息
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.Validation.Message">
            <summary>
            错误详情
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.WebsiteOptions">
            <summary>
            网站配置
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.WebsiteOptions.SourceUrl">
            <summary>
            开源地址
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.WebsiteOptions.WikiUrl">
            <summary>
            文档地址
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.WebsiteOptions.QQGroup1Link">
            <summary>
            QQ群链接地址
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.SysDictSeedData">
            <summary>
            系统配置种子数据
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysDictSeedData.SeedData">
            <inheritdoc />
        </member>
        <member name="T:ThingsGateway.Admin.Application.SysRelationSeedData">
            <summary>
            关系表种子数据
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysRelationSeedData.SeedData">
            <inheritdoc />
        </member>
        <member name="T:ThingsGateway.Admin.Application.SysResourceSeedData">
            <summary>
            资源表种子数据
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysResourceSeedData.SeedData">
            <inheritdoc />
        </member>
        <member name="T:ThingsGateway.Admin.Application.SysRoleSeedData">
            <summary>
            角色种子数据
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysRoleSeedData.SeedData">
            <inheritdoc />
        </member>
        <member name="T:ThingsGateway.Admin.Application.SysUserSeedData">
            <summary>
            用户表种子数据
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserSeedData.SeedData">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthService.LoginAsync(ThingsGateway.Admin.Application.LoginInput,System.Boolean)">
            <summary>
            登录
            </summary>
            <param name="input">登录参数</param>
            <param name="isCookie">cookie方式登录</param>
            <returns>登录输出</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthService.LoginOutAsync">
            <summary>
            注销当前用户
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthService.BeforeLogin(ThingsGateway.Admin.Application.AppConfig,System.String)">
            <summary>
            登录之前执行的方法
            </summary>
            <param name="appConfig">配置</param>
            <param name="userName">用户名称</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthService.LoginError(ThingsGateway.Admin.Application.LoginPolicy,System.String)">
            <summary>
            登录错误反馈
            </summary>
            <param name="loginPolicy">登录策略</param>
            <param name="userName">用户名称</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthService.ExecLogin(ThingsGateway.Admin.Application.LoginPolicy,ThingsGateway.Admin.Application.LoginInput,ThingsGateway.Admin.Application.SysUser,System.Boolean)">
            <summary>
            执行登录
            </summary>
            <param name="loginPolicy">登录策略</param>
            <param name="input">用户登录参数</param>
            <param name="sysUser">用户信息</param>
            <param name="isCookie">cookie方式登录</param>
            <returns>登录输出结果</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthService.UpdateUser(ThingsGateway.Admin.Application.LoginEvent)">
            <summary>
            登录事件
            </summary>
            <param name="loginEvent"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthService.WriteTokenToCache(ThingsGateway.Admin.Application.LoginPolicy,ThingsGateway.Admin.Application.LoginEvent)">
            <summary>
            写入用户verificat到cache
            </summary>
            <param name="loginPolicy">登录策略</param>
            <param name="loginEvent">登录事件参数</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthService.RemoveTokenFromCache(ThingsGateway.Admin.Application.LoginEvent)">
            <summary>
            从cache删除用户verificat
            </summary>
            <param name="loginEvent">登录事件参数</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthService.GetTokenInfos(System.Int64)">
            <summary>
            获取用户verificat列表
            </summary>
            <param name="userId">用户Id</param>
            <returns>verificat列表</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthService.SingleLogin(System.Int64,System.Collections.Generic.IEnumerable{ThingsGateway.Admin.Application.VerificatInfo})">
            <summary>
            单用户登录通知用户下线
            </summary>
            <param name="userId">用户Id</param>
            <param name="verificatInfos">verificat列表</param>
        </member>
        <member name="T:ThingsGateway.Admin.Application.LoginEvent">
            <summary>
            登录事件参数
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginEvent.SysUser">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginEvent.Ip">
            <summary>
            Ip地址
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginEvent.VerificatId">
            <summary>
            VerificatId
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginEvent.Expire">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginEvent.Device">
            <summary>
            登录设备
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.LoginEvent.DateTime">
            <summary>
            时间
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.LoginInput">
            <summary>
            登录输入参数
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginInput.Account">
             <summary>
             账号
            </summary>
             <example>apiAdmin</example>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginInput.Password">
             <summary>
             密码
            </summary>
            <example>7DA385A25A98388E</example>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginInput.Device">
            <summary>
            设备类型，默认PC
            </summary>
            <example>0</example>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginOutput.VerificatId">
            <summary>
            验证ID
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginOutput.Account">
            <summary>
            账号
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginOutput.Id">
            <summary>
            用户Id
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginOutput.DefaultRazor">
            <summary>
            默认主页
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginOutput.DefaultModule">
            <summary>
            默认模块
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginOutput.ModuleList">
            <summary>
            模块列表
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.BaseService`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.BaseService`1.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:ThingsGateway.Admin.Application.AppConfig.LoginPolicy">
            <summary>
            登录策略
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.AppConfig.PasswordPolicy">
            <summary>
            密码策略
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.AppConfig.PagePolicy">
            <summary>
            页面策略
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginPolicy.SingleOpen">
            <summary>
            单用户登录开关
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginPolicy.ErrorLockTime">
            <summary>
            登录错误锁定时间(分)
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginPolicy.ErrorResetTime">
            <summary>
             登录错误次数过期时间(分)
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginPolicy.ErrorCount">
            <summary>
            登录错误次数锁定阈值
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginPolicy.VerificatExpireTime">
            <summary>
            登录过期时间(分)
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.PagePolicy.DefaultShortcuts">
            <summary>
            系统默认快捷方式菜单ID列表
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.PagePolicy.DefaultRazor">
            <summary>
            系统默认主页ID
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.PasswordPolicy.DefaultPassword">
            <summary>
            默认用户密码
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.PasswordPolicy.PasswordMinLen">
            <summary>
            密码最小长度
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.PasswordPolicy.PasswordContainNum">
            <summary>
            包含数字
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.PasswordPolicy.PasswordContainLower">
            <summary>
            包含小写字母
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.PasswordPolicy.PasswordContainUpper">
            <summary>
            包含大写字母
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.PasswordPolicy.PasswordContainChar">
            <summary>
            包含特殊字符
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.WebsitePolicy.WebStatus">
            <summary>
            是否开放
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.WebsitePolicy.CloseTip">
            <summary>
            关闭提示
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysDictService.GetAppConfigAsync">
            <summary>
            获取系统配置
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysDictService.GetSystemConfigAsync">
            <summary>
            从缓存/数据库获取系统配置列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysDictService.PageAsync(BootstrapBlazor.Components.QueryPageOptions)">
            <summary>
            表格查询
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysDictService.GetByKeyAsync(System.String,System.String)">
            <summary>
            根据分类从缓存/数据库获取列表
            </summary>
            <param name="category">分类</param>
            <param name="name">名称</param>
            <returns>配置列表</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysDictService.SaveDictAsync(ThingsGateway.Admin.Application.SysDict,BootstrapBlazor.Components.ItemChangedType)">
            <summary>
            修改业务配置
            </summary>
            <param name="input">配置项</param>
            <param name="type">保存类型</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysDictService.DeleteDictAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            删除业务配置
            </summary>
            <param name="ids">id列表</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysDictService.EditLoginPolicyAsync(ThingsGateway.Admin.Application.LoginPolicy)">
            <summary>
            修改登录策略
            </summary>
            <param name="input">登录策略</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysDictService.EditPasswordPolicyAsync(ThingsGateway.Admin.Application.PasswordPolicy)">
            <summary>
            修改密码策略
            </summary>
            <param name="input">密码策略</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysDictService.EditPagePolicyAsync(ThingsGateway.Admin.Application.PagePolicy)">
            <summary>
            修改页面策略
            </summary>
            <param name="input">页面策略</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysDictService.EditWebsitePolicyAsync(ThingsGateway.Admin.Application.WebsitePolicy)">
            <summary>
            修改网站设置
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysDictService.RefreshCache(ThingsGateway.Admin.Application.DictTypeEnum)">
            <summary>
            刷新缓存
            </summary>
            <param name="define">类型</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysDictService.CheckInput(ThingsGateway.Admin.Application.SysDict)">
            <summary>
            检查输入参数
            </summary>
            <param name="input">配置项</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.FileService.UploadFileAsync(System.String,Microsoft.AspNetCore.Components.Forms.IBrowserFile)">
            <summary>
            上传文件，保存在磁盘中
            </summary>
            <param name="pPath">保存路径</param>
            <param name="file">文件</param>
            <returns>最终全路径</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.FileService.Verification(Microsoft.AspNetCore.Components.Forms.IBrowserFile,System.Int32,System.String[])">
            <summary>
            验证文件信息
            </summary>
            <param name="file">文件</param>
            <param name="maxSize">最大文件大小</param>
            <param name="allowTypes">扩展名称匹配</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.FileService.GetFileStreamResult(System.String,System.String,System.Boolean)">
            <summary>
            获取本地存储文件流
            </summary>
            <param name="path">文件夹</param>
            <param name="fileName">文件名称</param>
            <param name="isPathFolder">第一个参数是否是包含文件名称的全路径</param>
            <returns>文件流</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.FileService.GetFileStreamResult(System.Byte[],System.String)">
            <summary>
            按字节数组转为文件流
            </summary>
            <param name="byteArray">字节数组</param>
            <param name="fileName">文件名称</param>
            <returns>文件流</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.FileService.StorageLocal(System.String,Microsoft.AspNetCore.Components.Forms.IBrowserFile)">
            <summary>
            存储本地文件
            </summary>
            <param name="pPath">存储的第一层目录</param>
            <param name="file"></param>
            <returns>文件全路径</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ImportExportService.ExportAsync``1(System.Object,System.String,System.Boolean)">
            <summary>
            导出excel文件流
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="input">实体对象或者IDataReader</param>
            <param name="fileName">文件名称</param>
            <param name="isDynamicExcelColumn">动态excel列，根据实体的<see cref="T:ThingsGateway.Admin.Application.IgnoreExcelAttribute" />属性判断是否生成 </param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ImportExportService.UploadFileAsync(Microsoft.AspNetCore.Components.Forms.IBrowserFile)">
            <summary>
            上传文件
            </summary>
            <param name="file">文件</param>
            <returns>保存全路径</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ImportExportService.GetUrlEncodeFileName(System.String)">
            <summary>
            获取文件名，默认xlsx类型
            </summary>
            <param name="fileName">文件名称，不含类型名称的话默认xlsx</param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Admin.Application.OperateLogPageInput">
            <summary>
            操作日志分页输入
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.OperateLogPageInput.SearchDate">
            <summary>
            时间区间
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.OperateLogPageInput.Category">
            <summary>
            分类
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.OperateLogPageInput.Account">
            <summary>
            账号
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.OperateLogPageInput.GetSearches">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.OperateLogPageInput.Reset">
            <inheritdoc />
        </member>
        <member name="P:ThingsGateway.Admin.Application.OperateLogDayStatisticsOutput.Date">
            <summary>
            日期
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.OperateLogDayStatisticsOutput.OperateCount">
            <summary>
            操作次数
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.OperateLogDayStatisticsOutput.ExceptionCount">
            <summary>
            异常次数
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.OperateLogDayStatisticsOutput.LoginCount">
            <summary>
            登录次数
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.OperateLogDayStatisticsOutput.LogoutCount">
            <summary>
            登出次数
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysOperateLogService.PageAsync(BootstrapBlazor.Components.QueryPageOptions)">
            <summary>
            表格查询
            </summary>
            <param name="option">查询条件</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysOperateLogService.GetNewLog(System.String)">
            <summary>
            最新十条
            </summary>
            <param name="account">操作人</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysOperateLogService.StatisticsByDayAsync(System.Int32)">
            <summary>
            获取n天的统计信息
            </summary>
            <param name="day">天</param>
            <returns>统计信息</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysOperateLogService.DeleteAsync(ThingsGateway.Admin.Application.LogCateGoryEnum)">
            <summary>
            删除日志
            </summary>
            <param name="category">分类</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysOperateLogService.ExportFileAsync(System.Data.IDataReader)">
            <summary>
            导出日志
            </summary>
            <param name="input">IDataReader，为空时导出全部</param>
            <returns>文件流</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysOperateLogService.ExportFileAsync(BootstrapBlazor.Components.QueryPageOptions)">
            <summary>
            导出日志
            </summary>
            <param name="input">查询条件</param>
            <returns>文件流</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.RelationService.GetRelationByCategoryAsync(ThingsGateway.Admin.Application.RelationCategoryEnum)">
            <summary>
            根据分类获取关系表信息
            </summary>
            <param name="category">分类名称</param>
            <returns>关系表</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.RelationService.GetRelationListByObjectIdAndCategoryAsync(System.Int64,ThingsGateway.Admin.Application.RelationCategoryEnum)">
            <summary>
            通过对象ID和分类获取关系列表
            </summary>
            <param name="objectId">对象ID</param>
            <param name="category">分类</param>
            <returns>关系表</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.RelationService.GetRelationListByObjectIdListAndCategoryAsync(System.Collections.Generic.IEnumerable{System.Int64},ThingsGateway.Admin.Application.RelationCategoryEnum)">
            <summary>
            通过对象ID列表和分类获取关系列表
            </summary>
            <param name="objectIds">对象ID</param>
            <param name="category">分类</param>
            <returns>关系表</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.RelationService.GetRelationListByTargetIdAndCategoryAsync(System.String,ThingsGateway.Admin.Application.RelationCategoryEnum)">
            <summary>
            通过目标ID和分类获取关系列表
            </summary>
            <param name="targetId">目标ID</param>
            <param name="category">分类</param>
            <returns>关系表</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.RelationService.GetRelationListByTargetIdListAndCategoryAsync(System.Collections.Generic.IEnumerable{System.String},ThingsGateway.Admin.Application.RelationCategoryEnum)">
            <summary>
            通过目标ID列表和分类获取关系列表
            </summary>
            <param name="targetIds"></param>
            <param name="category"></param>
            <returns>关系表</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.RelationService.GetUserModuleId(System.Collections.Generic.IEnumerable{System.Int64},System.Int64)">
            <summary>
            获取用户模块ID
            </summary>
            <param name="roleIdList">角色id列表</param>
            <param name="userId">用户id</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.RelationService.SaveRelationBatchAsync(ThingsGateway.Admin.Application.RelationCategoryEnum,System.Int64,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}},System.Boolean)">
            <summary>
            保存关系
            </summary>
            <param name="category">分类</param>
            <param name="objectId">对象ID</param>
            <param name="targetIdAndExtJsons">目标ID和拓展信息</param>
            <param name="clear">是否清除老的数据</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.RelationService.SaveRelationAsync(ThingsGateway.Admin.Application.RelationCategoryEnum,System.Int64,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            保存关系
            </summary>
            <param name="category">分类</param>
            <param name="objectId">对象ID</param>
            <param name="targetId">目标ID</param>
            <param name="extJson">拓展信息</param>
            <param name="clear">是否清除老的数据</param>
            <param name="refreshCache">是否刷新缓存</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.RelationService.RefreshCache(ThingsGateway.Admin.Application.RelationCategoryEnum)">
            <summary>
            更新缓存
            </summary>
            <param name="category">分类</param>
        </member>
        <member name="T:ThingsGateway.Admin.Application.MenuChangeModuleInput">
            <summary>
            改变模块输入参数
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.MenuChangeModuleInput.Module">
            <summary>
            模块ID
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.ResourceSearchInput">
            <summary>
            操作日志分页输入
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.ResourceSearchInput.Module">
            <summary>
            模块ID，单独搜索
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ResourceSearchInput.GetSearches">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.ResourceSearchInput.Reset">
            <inheritdoc />
        </member>
        <member name="T:ThingsGateway.Admin.Application.ResTreeSelector">
            <summary>
            角色授权资源树输出
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.ResTreeSelector.Id">
            <summary>
            模块id
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.ResTreeSelector.Title">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.ResTreeSelector.Icon">
            <summary>
            模块图标
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.ResTreeSelector.Menu">
            <summary>
            模块下菜单集合
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.RoleGrantResourceMenu">
            <summary>
            授权菜单类
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.RoleGrantResourceMenu.Id">
            <summary>
            菜单id
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.RoleGrantResourceMenu.ParentId">
            <summary>
            父id
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.RoleGrantResourceMenu.ParentName">
            <summary>
            父名称
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.RoleGrantResourceMenu.Title">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.RoleGrantResourceMenu.Module">
            <summary>
            模块id
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.RoleGrantResourceMenu.Button">
            <summary>
            菜单下按钮集合
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.RoleGrantResourceButton">
            <summary>
            角色授权资源按钮信息
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.RoleGrantResourceButton.Id">
            <summary>
            按钮id
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.RoleGrantResourceButton.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.PermissionTreeSelector.ApiName">
            <summary>
            接口描述
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.PermissionTreeSelector.ApiRoute">
            <summary>
            路由名称
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.OpenApiPermissionTreeSelector">
            <summary>
            Api授权资源树
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.OpenApiPermissionTreeSelector.ApiName">
            <summary>
            接口描述
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.OpenApiPermissionTreeSelector.ApiRoute">
            <summary>
            路由名称
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.OpenApiPermissionTreeSelector.Children">
            <summary>
            子节点
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysResourceService.GetAllAsync">
            <summary>
            从缓存/数据库读取全部资源列表
            </summary>
            <returns>全部资源列表</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysResourceService.PageAsync(BootstrapBlazor.Components.QueryPageOptions,ThingsGateway.Admin.Application.ResourceSearchInput)">
            <summary>
            表格查询
            </summary>
            <param name="options">查询条件</param>
            <param name="searchModel">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysResourceService.GetMenuAndSpaListByModuleId(System.Int64)">
            <summary>
            根据模块id获取菜单列表
            </summary>
            <param name="id">模块id</param>
            <returns>菜单列表</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysResourceService.GetMenuByMenuIdsAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据菜单Id获取菜单列表
            </summary>
            <param name="menuIds">菜单id列表</param>
            <returns>菜单列表</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysResourceService.GetMuduleByMuduleIdsAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据模块Id获取模块列表
            </summary>
            <param name="moduleIds">模块id列表</param>
            <returns>菜单列表</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysResourceService.SaveResourceAsync(ThingsGateway.Admin.Application.SysResource,BootstrapBlazor.Components.ItemChangedType)">
            <summary>
            保存资源
            </summary>
            <param name="input">资源</param>
            <param name="type">保存类型</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysResourceService.DeleteResourceAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            删除资源
            </summary>
            <param name="ids">id列表</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysResourceService.ChangeModuleAsync(ThingsGateway.Admin.Application.MenuChangeModuleInput)">
            <summary>
            更改模块
            </summary>
            <param name="input">参数</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysResourceService.ResourceTreeSelectorAsync">
            <summary>
            获取授权资源选择器，未筛选权限
            </summary>
            <returns>授权资源选择器</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysResourceService.RefreshCache">
            <summary>
            刷新缓存
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysResourceService.GetRoleGrantResourceMenusAsync(System.Int64)">
            <summary>
            获取授权资源，结果是 固定菜单-按钮的形式，目录不会输出，未筛选角色权限
            </summary>
            <returns>资源输出</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysResourceService.GetRoleGrantResourceMenuTitle(System.Collections.Generic.IEnumerable{ThingsGateway.Admin.Application.SysResource},ThingsGateway.Admin.Application.SysResource)">
            <summary>
            获取授权菜单类菜单名称
            </summary>
            <param name="menuList">菜单列表</param>
            <param name="menu">当前菜单</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysResourceService.CheckInput(ThingsGateway.Admin.Application.SysResource)">
            <summary>
            检查输入参数
            </summary>
            <param name="sysResource">资源</param>
        </member>
        <member name="T:ThingsGateway.Admin.Application.GrantResourceData">
            <summary>
            角色授权资源参数
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.GrantResourceData.Id">
            <summary>
            角色Id
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.GrantResourceData.GrantInfoList">
            <summary>
            授权资源信息
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.GrantPermissionData">
            <summary>
            角色拥有权限输出
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.GrantPermissionData.Id">
            <summary>
            角色Id/用户Id
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.GrantPermissionData.GrantInfoList">
            <summary>
            已授权权限信息
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.GrantUserInput">
            <summary>
            角色授权用户参数
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.GrantUserInput.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.GrantUserInput.GrantInfoList">
            <summary>
            授权权限信息
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.RelationRolePermission">
            <summary>
            RoleHasPermission
            角色权限关系扩展
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.RelationRolePermission.ApiUrl">
            <summary>
            接口Url
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysRoleService.GetAllAsync">
            <summary>
            从缓存/数据库获取全部角色信息
            </summary>
            <returns>角色列表</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysRoleService.GetRoleListByUserIdAsync(System.Int64)">
            <summary>
            根据用户id获取角色列表
            </summary>
            <param name="userId">用户id</param>
            <returns>角色列表</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysRoleService.PageAsync(BootstrapBlazor.Components.QueryPageOptions)">
            <summary>
            报表查询
            </summary>
            <param name="option">查询条件</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysRoleService.SaveRoleAsync(ThingsGateway.Admin.Application.SysRole,BootstrapBlazor.Components.ItemChangedType)">
            <summary>
            保存角色
            </summary>
            <param name="input">角色</param>
            <param name="type">保存类型</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysRoleService.DeleteRoleAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            删除角色
            </summary>
            <param name="ids">id列表</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysRoleService.OwnResourceAsync(System.Int64,ThingsGateway.Admin.Application.RelationCategoryEnum)">
            <summary>
            获取拥有的资源
            </summary>
            <param name="id">id</param>
            <param name="category">类型</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysRoleService.GrantResourceAsync(ThingsGateway.Admin.Application.GrantResourceData)">
            <summary>
            授权资源
            </summary>
            <param name="input">授权信息</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysRoleService.OwnPermissionAsync(System.Int64)">
            <summary>
            获取角色拥有的权限
            </summary>
            <param name="id">角色id</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysRoleService.GrantPermissionAsync(ThingsGateway.Admin.Application.GrantPermissionData)">
            <summary>
            授权权限
            </summary>
            <param name="input">授权信息</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysRoleService.ApiOwnPermissionAsync(System.Int64)">
            <summary>
            获取角色拥有的OpenApi权限
            </summary>
            <param name="id">角色id</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysRoleService.GrantApiPermissionAsync(ThingsGateway.Admin.Application.GrantPermissionData)">
            <summary>
            授权OpenApi权限
            </summary>
            <param name="input">授权信息</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysRoleService.OwnUserAsync(System.Int64)">
            <summary>
            获取角色的用户id列表
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysRoleService.GrantUserAsync(ThingsGateway.Admin.Application.GrantUserInput)">
            <summary>
            授权用户
            </summary>
            <param name="input">授权参数</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysRoleService.RolePermissionTreeSelectorAsync(System.Int64)">
            <summary>
            获取角色权限选择器
            </summary>
            <param name="id">角色id</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysRoleService.RefreshCache">
            <summary>
            刷新权限
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysRoleService.GetRoleListByIdListAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据角色id获取角色列表
            </summary>
            <param name="input">角色id列表</param>
            <returns>角色列表</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysRoleService.CheckInput(ThingsGateway.Admin.Application.SysRole)">
            <summary>
            检查输入参数
            </summary>
            <param name="sysRole"></param>
        </member>
        <member name="T:ThingsGateway.Admin.Application.ExitVerificatInput">
            <summary>
            Token退出参数
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.ExitVerificatInput.Id">
            <summary>
            用户id
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.ExitVerificatInput.VerificatIds">
            <summary>
            verificat
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.SessionOutput">
            <summary>
            会话输出
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SessionOutput.Id">
            <summary>
            主键Id
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SessionOutput.Account">
             <summary>
             账号
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SessionOutput.Online">
            <summary>
            在线状态
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SessionOutput.LatestLoginIp">
             <summary>
             最新登录ip
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SessionOutput.LatestLoginTime">
             <summary>
             最新登录时间
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SessionOutput.VerificatCount">
            <summary>
            令牌数量
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SessionOutput.VerificatSignList">
            <summary>
            令牌信息集合
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SessionService.PageAsync(BootstrapBlazor.Components.QueryPageOptions)">
            <summary>
            表格查询
            </summary>
            <param name="option">查询条件</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SessionService.ExitSession(System.Int64)">
            <summary>
            强退会话
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SessionService.ExitVerificat(ThingsGateway.Admin.Application.ExitVerificatInput)">
            <summary>
            强退令牌
            </summary>
            <param name="input">参数</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SessionService.GetTokenDicFromRedis">
            <summary>
            获取redis中verificat信息列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SessionService.GetTokenInfos(System.Collections.Generic.List{ThingsGateway.Admin.Application.VerificatInfo}@)">
            <summary>
            获取verificat剩余时间信息
            </summary>
            <param name="verificatInfos">verificat列表</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SessionService.NoticeUserLoginOut(System.Int64,System.Collections.Generic.IEnumerable{ThingsGateway.Admin.Application.VerificatInfo})">
            <summary>
            通知用户下线
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Admin.Application.HubConst">
            <summary>
            通讯器常量
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.HubConst.SysHubUrl">
            <summary>
            系统HubUrl
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.ISysHub">
            <summary>
            即时通讯集线器
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ISysHub.LoginOut(System.String)">
            <summary>
            退出登录
            </summary>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ISysHub.NewMessage(ThingsGateway.Admin.Application.SignalRMessage)">
            <summary>
            新消息
            </summary>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Admin.Application.SignalRMessage">
            <summary>
            SignalR消息
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SignalRMessage.LogLevel">
            <summary>
            消息等级
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SignalRMessage.Data">
            <summary>
            消息内容
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysHub.OnConnectedAsync">
            <summary>
            连接
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysHub.OnDisconnectedAsync(System.Exception)">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysHub.UpdateVerificat(System.Int64,System.Int64,System.Boolean)">
            <summary>
            更新cache
            </summary>
            <param name="userId">用户id</param>
            <param name="verificat">上线时的验证id</param>
            <param name="isConnect">上线</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SignalrNoticeService.NewMesage(System.Collections.Generic.IEnumerable{System.Int64},ThingsGateway.Admin.Application.SignalRMessage)">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.SignalrNoticeService.UserLoginOut(System.Collections.Generic.IEnumerable{System.Int64},System.String)">
            <inheritdoc />
        </member>
        <member name="T:ThingsGateway.Admin.Application.WorkbenchInfo">
            <summary>
            更新个人工作台
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.WorkbenchInfo.Razor">
            <summary>
            个人主页数据
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.WorkbenchInfo.Shortcuts">
            <summary>
            工作台数据
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.UpdatePasswordInput">
            <summary>
            修改密码
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.UpdatePasswordInput.Password">
            <summary>
            旧密码
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.UpdatePasswordInput.NewPassword">
            <summary>
            新密码
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.UpdatePasswordInput.ConfirmPassword">
            <summary>
            确认密码
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.UpdatePasswordInput.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.UserCenterService.GetOwnMenuAsync(System.Int64,System.Int64)">
            <summary>
            获取菜单列表，不会转成树形数据
            </summary>
            <param name="userId">用户id</param>
            <param name="moduleId">模块id</param>
            <returns>菜单列表</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.UserCenterService.GetLoginWorkbenchAsync(System.Int64)">
            <summary>
            获取个人工作台
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.UserCenterService.SetDefaultModule(System.Int64)">
            <summary>
            设置默认模块
            </summary>
            <param name="moduleId"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.UserCenterService.UpdateUserInfoAsync(ThingsGateway.Admin.Application.SysUser)">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.UserCenterService.UpdateWorkbenchInfoAsync(ThingsGateway.Admin.Application.WorkbenchInfo)">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.UserCenterService.UpdatePasswordAsync(ThingsGateway.Admin.Application.UpdatePasswordInput)">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.UserCenterService.UserLoginOut(System.Int64,System.Collections.Generic.IEnumerable{ThingsGateway.Admin.Application.VerificatInfo})">
            <summary>
            通知用户下线
            </summary>
            <param name="userId">用户ID</param>
            <param name="verificatInfos">Token列表</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.UserCenterService.GetMyParentMenus(System.Collections.Generic.IEnumerable{ThingsGateway.Admin.Application.SysResource},System.Collections.Generic.IEnumerable{ThingsGateway.Admin.Application.SysResource})">
            <summary>
            获取父菜单集合
            </summary>
            <param name="allMenuList">所有菜单列表</param>
            <param name="myMenus">我的菜单列表</param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Admin.Application.UserGrantRoleInput">
            <summary>
            授权用户角色参数
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.UserSelectorOutput">
            <summary>
            选择用户输出参数
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.GetUserByAccountAsync(System.String)">
            <summary>
            根据账号获取用户，不存在返回null
            </summary>
            <param name="account">账号</param>
            <returns>用户</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.GetUserByIdAsync(System.Int64)">
            <summary>
            根据用户id获取用户，不存在返回null
            </summary>
            <param name="userId">用户id</param>
            <returns>用户</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.GetIdByAccountAsync(System.String)">
            <summary>
            根据账号获取用户id
            </summary>
            <param name="account">账号</param>
            <returns>用户id</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.GetButtonCodeListAsync(System.Int64)">
            <summary>
            获取用户拥有的按钮编码
            </summary>
            <param name="userId">用户id</param>
            <returns>按钮编码</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.GetPermissionListByUserIdAsync(System.Int64)">
            <summary>
            获取用户拥有的权限
            </summary>
            <param name="userId">用户id</param>
            <returns>权限</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.UserSelectorAsync(System.String)">
            <summary>
            获取用户选择器
            </summary>
            <param name="account">账号</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.PageAsync(BootstrapBlazor.Components.QueryPageOptions)">
            <summary>
            表格查询
            </summary>
            <param name="option">查询条件</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.OwnRoleAsync(System.Int64)">
            <summary>
            获取用户拥有的角色
            </summary>
            <param name="id">用户id</param>
            <returns>角色id列表</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.OwnResourceAsync(System.Int64)">
            <summary>
            获取用户拥有的资源
            </summary>
            <param name="id">用户id</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.OwnPermissionAsync(System.Int64)">
            <summary>
            获取用户拥有的权限
            </summary>
            <param name="id">用户id</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.UserPermissionTreeSelectorAsync(System.Int64)">
            <summary>
            获取用户权限选择器
            </summary>
            <param name="id">用户id</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.GetUserListByIdListAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据用户id获取用户列表
            </summary>
            <param name="input">用户id列表</param>
            <returns>用户列表</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.ApiOwnPermissionAsync(System.Int64)">
            <summary>
            获取用户拥有的OpenApi权限
            </summary>
            <param name="id">用户id</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.GrantApiPermissionAsync(ThingsGateway.Admin.Application.GrantPermissionData)">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.SaveUserAsync(ThingsGateway.Admin.Application.SysUser,BootstrapBlazor.Components.ItemChangedType)">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.ResetPasswordAsync(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.GrantRoleAsync(ThingsGateway.Admin.Application.UserGrantRoleInput)">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.GrantResourceAsync(ThingsGateway.Admin.Application.GrantResourceData)">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.GrantPermissionAsync(ThingsGateway.Admin.Application.GrantPermissionData)">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.DeleteUserAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.DeleteUserFromCache(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.DeleteUserFromCache(System.Collections.Generic.IEnumerable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.UserLoginOut(System.Int64,System.Collections.Generic.IEnumerable{ThingsGateway.Admin.Application.VerificatInfo})">
            <summary>
            通知用户下线
            </summary>
            <param name="userId">用户ID</param>
            <param name="verificatInfos">Token列表</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.GetDefaultPassWord(System.Boolean)">
            <summary>
            获取默认密码
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.CheckInput(ThingsGateway.Admin.Application.SysUser)">
            <summary>
            检查输入参数
            </summary>
            <param name="sysUser"></param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.CheckSelf(System.Int64,System.String)">
            <summary>
            检查是否为自己
            </summary>
            <param name="id"></param>
            <param name="operate">操作名称</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.SysUserService.GetUserFromDb(System.Int64)">
            <summary>
            数据库获取用户信息
            </summary>
            <param name="userId">用户ID</param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Admin.Application.VerificatInfo">
            <summary>
            会话信息
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.VerificatInfo.ClientIds">
            <summary>
            客户端ID列表
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.VerificatInfo.Expire">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.VerificatInfo.Id">
            <summary>
            验证Id
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.VerificatInfo.Online">
            <summary>
            在线状态
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.VerificatInfo.OnlineNum">
            <summary>
            连接数量
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.VerificatInfo.VerificatRemain">
            <summary>
            verificat剩余有效期
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.VerificatInfo.VerificatTimeout">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.VerificatInfo.Device">
            <summary>
            登录设备
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.CodeFirstUtils">
            <summary>
            CodeFirst功能类
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.CodeFirstUtils.CodeFirst(System.String)">
            <summary>
             CodeFirst生成数据库表结构和种子数据
            </summary>
            <param name="assemblyName">程序集名称</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.CodeFirstUtils.InitTable(System.String)">
            <summary>
            初始化数据库表结构
            </summary>
            <param name="assemblyName">程序集名称</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.CodeFirstUtils.InitSeedData(System.String)">
            <summary>
            初始化种子数据
            </summary>
            <param name="assemblyName">程序集名称</param>
        </member>
        <member name="T:ThingsGateway.Admin.Application.DbContext">
            <summary>
            数据库上下文对象
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.DbContext.DbConfigs">
            <summary>
            读取配置文件中的 ConnectionStrings:Sqlsugar 配置节点
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.DbContext.Db">
            <summary>
            SqlSugar 数据库实例
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.DbContext.ExternalServicesSetting(SqlSugar.SqlSugarScopeProvider)">
            <summary>
            实体拓展配置,自定义类型多库兼容
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.DbContext.AopSetting(SqlSugar.ISqlSugarClient,System.Boolean)">
            <summary>
            Aop设置
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.DbContext.MoreSetting(SqlSugar.SqlSugarScopeProvider)">
            <summary>
            实体更多配置
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.DbContext.FilterSetting(SqlSugar.SqlSugarScopeProvider)">
            <summary>
            过滤器设置
            </summary>
            <param name="db"></param>
        </member>
        <member name="T:ThingsGateway.Admin.Application.ISqlSugarEntitySeedData`1">
            <summary>
            实体种子数据接口
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ISqlSugarEntitySeedData`1.SeedData">
            <summary>
            种子数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Admin.Application.SeedDataUtil">
            <summary>
            种子数据工具类
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.SeedDataRecords`1">
            <summary>
            种子数据格式实体类,遵循Navicat导出json格式
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SeedDataRecords`1.Records">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.SqlSugarOption">
            <summary>
            SqlSugar配置
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SqlSugarOption.InitTable">
            <summary>
            初始化表
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SqlSugarOption.InitSeedData">
            <summary>
            初始化数据
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SqlSugarOption.IsUpdateSeedData">
            <summary>
            更新数据
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.SqlSugarOption.IsShowSql">
            <summary>
            是否控制台显示Sql语句
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.SqlSugarOptions">
            <summary>
            SqlSugar配置
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.App">
            <summary>
            App静态类
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.App.Assemblies">
            <summary>
            直接引用程序集，不支持单文件
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.App.RazorAssemblies">
            <summary>
            直接引用程序集中的Route Razor类，不支持单文件
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.App.EffectiveTypes">
            <summary>
            直接引用程序集中的类型，不支持单文件
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.App.WebRootPath">
            <summary>
            系统 wwwroot 文件夹路径 Server Side 模式下 Upload 使用
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.App.ContentRootPath">
            <summary>
            当前程序文件夹
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.App.IsDevelopment">
            <summary>
            是否开发环境
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.App.RootServices">
            <summary>
            系统根服务
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.App.HttpContext">
            <summary>
            获取请求上下文
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.App.User">
            <summary>
            获取请求上下文用户
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.App.Configuration">
            <summary>
            系统配置
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.App.CacheService">
            <summary>
            当前缓存服务
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.App.StringLocalizerFactory">
            <summary>
            本地化服务工厂
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.App.CreateLocalizerByType(System.Type)">
            <summary>
            根据类型创建本地化服务
            </summary>
            <param name="resourceSource"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.App.GetThreadId">
            <summary>
            获取当前线程 Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.App.GetTraceId">
            <summary>
            获取当前请求 TraceId
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.App.GetAssemblies">
            <summary>
            获取应用有效程序集
            </summary>
            <returns>IEnumerable</returns>
        </member>
        <member name="T:ThingsGateway.Admin.Application.Oops">
            <summary>
            抛异常静态类
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.Oops.Bah(System.String,System.Object[])">
            <summary>
            抛出业务异常信息
            </summary>
            <param name="errorMessage">异常消息</param>
            <param name="args">String.Format 参数</param>
            <returns>异常实例</returns>
        </member>
        <member name="T:ThingsGateway.Admin.Application.UserManager">
            <summary>
            当前登录用户信息
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.UserManager.SuperAdmin">
            <summary>
            是否超级管理员
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.UserManager.UserAccount">
            <summary>
            当前用户账号
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.UserManager.UserId">
            <summary>
            当前用户Id
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.UserManager.VerificatId">
            <summary>
            当前验证Id
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ClearTokenUtil.DeleteUserCacheByRoleIds(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据角色ID列表清除用户缓存
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ClearTokenUtil.DeleteUserTokenByModuleId(System.Int64)">
            <summary>
            根据模块ID列表清除用户token
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.JWTEncryption">
            <summary>
            JWT 加解密
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.JWTEncryption._refreshTokenClaims">
            <summary>
            刷新 Token 身份标识
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.JWTEncryption.Encrypt(System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int64})">
            <summary>
            生成 Token
            </summary>
            <param name="payload"></param>
            <param name="expiredTime">过期时间（分钟）</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.JWTEncryption.Encrypt(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            生成 Token
            </summary>
            <param name="issuerSigningKey"></param>
            <param name="payload"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.JWTEncryption.Encrypt(System.String,System.String,System.String)">
            <summary>
            生成 Token
            </summary>
            <param name="issuerSigningKey"></param>
            <param name="payload"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.JWTEncryption.GenerateRefreshToken(System.String,System.Int32)">
            <summary>
            生成刷新 Token
            </summary>
            <param name="accessToken"></param>
            <param name="expiredTime">刷新 Token 有效期（分钟）</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.JWTEncryption.Exchange(System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过过期Token 和 刷新Token 换取新的 Token
            </summary>
            <param name="expiredToken"></param>
            <param name="refreshToken"></param>
            <param name="expiredTime">过期时间（分钟）</param>
            <param name="clockSkew">刷新token容差值，秒做单位</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.JWTEncryption.AutoRefreshToken(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.DefaultHttpContext,System.Nullable{System.Int64},System.Int32,System.String,System.Int64)">
            <summary>
            自动刷新 Token 信息
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <param name="expiredTime">新 Token 过期时间（分钟）</param>
            <param name="refreshTokenExpiredTime">新刷新 Token 有效期（分钟）</param>
            <param name="tokenPrefix"></param>
            <param name="clockSkew"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.JWTEncryption.Validate(System.String)">
            <summary>
            验证 Token
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.JWTEncryption.ValidateJwtBearerToken(Microsoft.AspNetCore.Http.DefaultHttpContext,Microsoft.IdentityModel.JsonWebTokens.JsonWebToken@,System.String,System.String)">
            <summary>
            验证 Token
            </summary>
            <param name="httpContext"></param>
            <param name="token"></param>
            <param name="headerKey"></param>
            <param name="tokenPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.JWTEncryption.ReadJwtToken(System.String)">
            <summary>
            读取 Token，不含验证
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.JWTEncryption.SecurityReadJwtToken(System.String)">
            <summary>
            读取 Token，不含验证
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.JWTEncryption.GetJwtBearerToken(Microsoft.AspNetCore.Http.DefaultHttpContext,System.String,System.String)">
            <summary>
            获取 JWT Bearer Token
            </summary>
            <param name="httpContext"></param>
            <param name="headerKey"></param>
            <param name="tokenPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.JWTEncryption.GetJWTSettings">
            <summary>
            获取 JWT 配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.JWTEncryption.CreateTokenValidationParameters(ThingsGateway.Admin.Application.JWTSettingsOptions)">
            <summary>
            生成Token验证参数
            </summary>
            <param name="jwtSettings"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.JWTEncryption.CombinePayload(System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int64})">
            <summary>
            组合 Claims 负荷
            </summary>
            <param name="payload"></param>
            <param name="expiredTime">过期时间，单位：分钟</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.JWTEncryption.SetDefaultJwtSettings(ThingsGateway.Admin.Application.JWTSettingsOptions)">
            <summary>
            设置默认 Jwt 配置
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.JWTEncryption.GetCurrentHttpContext">
            <summary>
            获取当前的 HttpContext
            </summary>
            <returns></returns>
        </member>
        <member name="F:ThingsGateway.Admin.Application.JWTEncryption.DateTypeClaimTypes">
            <summary>
            日期类型的 Claim 类型
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.JWTEncryption.FrameworkApp">
            <summary>
            框架 App 静态类
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.JWTSettingsOptions">
            <summary>
            Jwt 配置
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.JWTSettingsOptions.ValidateIssuerSigningKey">
            <summary>
            验证签发方密钥
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.JWTSettingsOptions.IssuerSigningKey">
            <summary>
            签发方密钥
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.JWTSettingsOptions.ValidateIssuer">
            <summary>
            验证签发方
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.JWTSettingsOptions.ValidIssuer">
            <summary>
            签发方
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.JWTSettingsOptions.ValidateAudience">
            <summary>
            验证签收方
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.JWTSettingsOptions.ValidAudience">
            <summary>
            签收方
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.JWTSettingsOptions.ValidateLifetime">
            <summary>
            验证生存期
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.JWTSettingsOptions.ClockSkew">
            <summary>
            过期时间容错值，解决服务器端时间不同步问题（秒）
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.JWTSettingsOptions.ExpiredTime">
            <summary>
            过期时间（分钟）
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.JWTSettingsOptions.Algorithm">
            <summary>
            加密算法
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.JWTSettingsOptions.RequireExpirationTime">
            <summary>
            验证过期时间，设置 false 永不过期
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.NoticeUtil.UserLoginOut(ThingsGateway.Admin.Application.UserLoginOutEvent)">
            <summary>
            通知用户下线事件
            </summary>
            <param name="userLoginOutEvent"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.NoticeUtil.NewMessage(ThingsGateway.Admin.Application.NewMessageEvent)">
            <summary>
            有新的消息
            </summary>
            <param name="newMessageEvent"></param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Admin.Application.UserLoginOutEvent">
            <summary>
            用户登出事件
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.UserLoginOutEvent.VerificatInfos">
            <summary>
            verificat信息
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.UserLoginOutEvent.Message">
            <summary>
            内容
            </summary>
        </member>
        <member name="T:ThingsGateway.Admin.Application.NewMessageEvent">
            <summary>
            新消息事件
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.NewMessageEvent.UserIds">
            <summary>
            用户Id
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.NewMessageEvent.Message">
            <summary>
            内容
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ResourceUtil.BuildModuleSelectList(System.Collections.Generic.IEnumerable{ThingsGateway.Admin.Application.SysResource})">
            <summary>
            构造选择项，ID/TITLE
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ResourceUtil.BuildMenuSelectList(System.Collections.Generic.IEnumerable{ThingsGateway.Admin.Application.SysResource})">
            <summary>
            构造选择项，ID/TITLE
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ResourceUtil.BuildTableTrees(System.Collections.Generic.IEnumerable{ThingsGateway.Admin.Application.SysResource},System.Int64)">
            <summary>
            构造树形数据
            </summary>
            <param name="items">资源列表</param>
            <param name="parentId">父ID</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ResourceUtil.BuildTreeItemList(System.Collections.Generic.IEnumerable{ThingsGateway.Admin.Application.SysResource},System.Collections.Generic.List{System.Int64},Microsoft.AspNetCore.Components.RenderFragment{ThingsGateway.Admin.Application.SysResource},System.Int64,BootstrapBlazor.Components.TreeViewItem{ThingsGateway.Admin.Application.SysResource})">
            <summary>
            构建树节点
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ResourceUtil.BuildTreeItemList(System.Collections.Generic.IEnumerable{ThingsGateway.Admin.Application.OpenApiPermissionTreeSelector},System.Collections.Generic.List{System.String},Microsoft.AspNetCore.Components.RenderFragment{ThingsGateway.Admin.Application.OpenApiPermissionTreeSelector},BootstrapBlazor.Components.TreeViewItem{ThingsGateway.Admin.Application.OpenApiPermissionTreeSelector})">
            <summary>
            构建树节点，传入的列表已经是树结构
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ResourceUtil.BuildMenuTrees(System.Collections.Generic.IEnumerable{ThingsGateway.Admin.Application.SysResource},System.Int64)">
            <summary>
            构造树形菜单
            </summary>
            <param name="items">资源列表</param>
            <param name="parentId">父ID</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ResourceUtil.ConstructMenuTrees(System.Collections.Generic.IEnumerable{ThingsGateway.Admin.Application.SysResource},System.Int64)">
            <summary>
            构造树形
            </summary>
            <param name="resourceList">资源列表</param>
            <param name="parentId">父ID</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ResourceUtil.GetResourceChilden(System.Collections.Generic.IEnumerable{ThingsGateway.Admin.Application.SysResource},System.Int64)">
            <summary>
            获取资源所有下级，结果不会转为树形
            </summary>
            <param name="resourceList">资源列表</param>
            <param name="parentId">父Id</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ResourceUtil.GetResourceParent(System.Collections.Generic.IEnumerable{ThingsGateway.Admin.Application.SysResource},System.Int64)">
            <summary>
            获取资源所有父级，结果不会转为树形
            </summary>
            <param name="resourceList">资源列表</param>
            <param name="resourceId">Id</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ResourceUtil.GetRouteName(System.String,System.String)">
            <summary>
            获取路由地址名称
            </summary>
            <param name="controllerName">控制器地址</param>
            <param name="template">路由名称</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ResourceUtil.PermissionTreeSelector(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.ResourceUtil.PermissionTreeSelector">
            <inheritdoc />
        </member>
        <member name="M:ThingsGateway.Admin.Application.ResourceUtil.ApiPermissionTreeSelector">
            <inheritdoc />
        </member>
        <member name="T:ThingsGateway.Logging.LogContextExtensions">
            <summary>
            LogContext 拓展
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.LogContextExtensions.Set(ThingsGateway.Logging.LogContext,System.Object,System.Object)">
            <summary>
            设置上下文数据
            </summary>
            <param name="logContext"></param>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Logging.LogContextExtensions.SetRange(ThingsGateway.Logging.LogContext,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            批量设置上下文数据
            </summary>
            <param name="logContext"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Logging.LogContextExtensions.Get(ThingsGateway.Logging.LogContext,System.Object)">
            <summary>
            获取上下文数据
            </summary>
            <param name="logContext"></param>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Logging.LogContextExtensions.Get``1(ThingsGateway.Logging.LogContext,System.Object)">
            <summary>
            获取上下文数据
            </summary>
            <param name="logContext"></param>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Logging.LogMessageExtensions">
            <summary>
            <see cref="T:ThingsGateway.Logging.LogMessage" /> 拓展
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.LogMessageExtensions.Write(ThingsGateway.Logging.LogMessage,System.Action{System.Text.Json.Utf8JsonWriter},System.Boolean)">
            <summary>
            高性能创建 JSON 对象字符串
            </summary>
            <param name="_"><see cref="T:ThingsGateway.Logging.LogMessage" /></param>
            <param name="writeAction"></param>
            <param name="writeIndented">是否对 JSON 格式化</param>
            <returns><see cref="T:System.String" /></returns>
        </member>
        <member name="M:ThingsGateway.Logging.LogMessageExtensions.WriteArray(ThingsGateway.Logging.LogMessage,System.Action{System.Text.Json.Utf8JsonWriter},System.Boolean)">
            <summary>
            高性能创建 JSON 数组字符串
            </summary>
            <param name="logMsg"><see cref="T:ThingsGateway.Logging.LogMessage" /></param>
            <param name="writeAction"></param>
            <param name="writeIndented">是否对 JSON 格式化</param>
            <returns><see cref="T:System.String" /></returns>
        </member>
        <member name="T:ThingsGateway.Logging.ConsoleColors">
            <summary>
            控制台颜色结构
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.ConsoleColors.#ctor(System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            构造函数
            </summary>
            <param name="foreground"></param>
            <param name="background"></param>
        </member>
        <member name="P:ThingsGateway.Logging.ConsoleColors.Foreground">
            <summary>
            前景色
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.ConsoleColors.Background">
            <summary>
            背景色
            </summary>
        </member>
        <member name="T:ThingsGateway.Logging.ConsoleFormatterExtend">
            <summary>
            控制台默认格式化程序拓展
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.ConsoleFormatterExtend._formatOptionsReloadToken">
            <summary>
            日志格式化选项刷新 Token
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.ConsoleFormatterExtend._formatterOptions">
            <summary>
            日志格式化配置选项
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.ConsoleFormatterExtend._disableColors">
            <summary>
            是否启用控制台颜色
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.ConsoleFormatterExtend.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{ThingsGateway.Logging.ConsoleFormatterExtendOptions})">
            <summary>
            构造函数
            </summary>
            <param name="formatterOptions"></param>
        </member>
        <member name="M:ThingsGateway.Logging.ConsoleFormatterExtend.Write``1(Microsoft.Extensions.Logging.Abstractions.LogEntry{``0}@,Microsoft.Extensions.Logging.IExternalScopeProvider,System.IO.TextWriter)">
            <summary>
            写入日志
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="logEntry"></param>
            <param name="scopeProvider"></param>
            <param name="textWriter"></param>
        </member>
        <member name="M:ThingsGateway.Logging.ConsoleFormatterExtend.Dispose">
            <summary>
            释放非托管资源
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.ConsoleFormatterExtend.ReloadFormatterOptions(ThingsGateway.Logging.ConsoleFormatterExtendOptions)">
            <summary>
            刷新日志格式化选项
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:ThingsGateway.Logging.ConsoleFormatterExtendOptions">
            <summary>
            控制台默认格式化选项拓展
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.ConsoleFormatterExtendOptions.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.ConsoleFormatterExtendOptions.ColorBehavior">
            <summary>
            控制是否启用颜色
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.ConsoleFormatterExtendOptions.MessageFormat">
            <summary>
            自定义日志消息格式化程序
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.ConsoleFormatterExtendOptions.DateFormat">
            <summary>
            日期格式化
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.ConsoleFormatterExtendOptions.WriteFilter">
            <summary>
            自定义日志筛选器
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.ConsoleFormatterExtendOptions.WriteHandler">
            <summary>
            自定义格式化日志处理程序
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.ConsoleFormatterExtendOptions.WithTraceId">
            <summary>
            显示跟踪/请求 Id
            </summary>
        </member>
        <member name="T:ThingsGateway.Logging.DatabaseLogger">
            <summary>
            数据库日志记录器
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="F:ThingsGateway.Logging.DatabaseLogger._logName">
            <summary>
            记录器类别名称
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.DatabaseLogger._databaseLoggerProvider">
            <summary>
            数据库日志记录器提供器
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.DatabaseLogger._options">
            <summary>
            日志配置选项
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.DatabaseLogger.#ctor(System.String,ThingsGateway.Logging.DatabaseLoggerProvider)">
            <summary>
            构造函数
            </summary>
            <param name="logName">记录器类别名称</param>
            <param name="databaseLoggerProvider">数据库日志记录器提供器</param>
        </member>
        <member name="M:ThingsGateway.Logging.DatabaseLogger.BeginScope``1(``0)">
            <summary>
            开始逻辑操作范围
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="state">要写入的项/对象</param>
            <returns><see cref="T:System.IDisposable" /></returns>
        </member>
        <member name="M:ThingsGateway.Logging.DatabaseLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            检查是否已启用给定日志级别
            </summary>
            <param name="logLevel">日志级别</param>
            <returns><see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:ThingsGateway.Logging.DatabaseLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            写入日志项
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="logLevel">日志级别</param>
            <param name="eventId">事件 Id</param>
            <param name="state">要写入的项/对象</param>
            <param name="exception">异常对象</param>
            <param name="formatter">日志格式化器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:ThingsGateway.Logging.DatabaseLoggerOptions">
            <summary>
            数据库记录器配置选项
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.DatabaseLoggerOptions.WriteFilter">
            <summary>
            自定义日志筛选器
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.DatabaseLoggerOptions.MinimumLevel">
            <summary>
            最低日志记录级别
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.DatabaseLoggerOptions.MessageFormat">
            <summary>
            自定义日志消息格式化程序
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.DatabaseLoggerOptions.HandleWriteError">
            <summary>
            自定义数据库日志写入错误程序
            </summary>
            <remarks>主要解决日志在写入过程出现异常问题</remarks>
            <example>
            options.HandleWriteError = (err) => {
                // do anything
            };
            </example>
        </member>
        <member name="P:ThingsGateway.Logging.DatabaseLoggerOptions.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间戳，默认 false
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.DatabaseLoggerOptions.DateFormat">
            <summary>
            日期格式化
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.DatabaseLoggerOptions.IncludeScopes">
            <summary>
            是否启用日志上下文
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.DatabaseLoggerOptions.IgnoreReferenceLoop">
            <summary>
            忽略日志循环输出
            </summary>
            <remarks>对性能有些许影响</remarks>
        </member>
        <member name="P:ThingsGateway.Logging.DatabaseLoggerOptions.WithTraceId">
            <summary>
            显示跟踪/请求 Id
            </summary>
        </member>
        <member name="T:ThingsGateway.Logging.DatabaseLoggerProvider">
            <summary>
            数据库日志记录器提供程序
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="F:ThingsGateway.Logging.DatabaseLoggerProvider._databaseLoggers">
            <summary>
            存储多日志分类日志记录器
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.DatabaseLoggerProvider._logMessageQueue">
            <summary>
            日志消息队列（线程安全）
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.DatabaseLoggerProvider._scopeProvider">
            <summary>
            日志作用域提供器
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.DatabaseLoggerProvider._serviceScope">
            <summary>
            数据库日志写入器作用域范围
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.DatabaseLoggerProvider._databaseLoggingWriter">
            <summary>
            数据库日志写入器
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.DatabaseLoggerProvider._processQueueTask">
            <summary>
            长时间运行的后台任务
            </summary>
            <remarks>实现不间断写入</remarks>
        </member>
        <member name="M:ThingsGateway.Logging.DatabaseLoggerProvider.#ctor(ThingsGateway.Logging.DatabaseLoggerOptions)">
            <summary>
            构造函数
            </summary>
            <param name="databaseLoggerOptions">数据库日志记录器配置选项</param>
        </member>
        <member name="P:ThingsGateway.Logging.DatabaseLoggerProvider.LoggerOptions">
            <summary>
            数据库日志记录器配置选项
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.DatabaseLoggerProvider.ScopeProvider">
            <summary>
            日志作用域提供器
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.DatabaseLoggerProvider.CreateLogger(System.String)">
            <summary>
            创建数据库日志记录器
            </summary>
            <param name="categoryName">日志分类名</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILogger" /></returns>
        </member>
        <member name="M:ThingsGateway.Logging.DatabaseLoggerProvider.SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider)">
            <summary>
            设置作用域提供器
            </summary>
            <param name="scopeProvider"></param>
        </member>
        <member name="M:ThingsGateway.Logging.DatabaseLoggerProvider.Dispose">
            <summary>
            释放非托管资源
            </summary>
            <remarks>控制日志消息队列</remarks>
        </member>
        <member name="M:ThingsGateway.Logging.DatabaseLoggerProvider.WriteToQueue(ThingsGateway.Logging.LogMessage)">
            <summary>
            将日志消息写入队列中等待后台任务出队写入数据库
            </summary>
            <param name="logMsg">结构化日志消息</param>
        </member>
        <member name="M:ThingsGateway.Logging.DatabaseLoggerProvider.SetServiceProvider(System.IServiceProvider,System.Type)">
            <summary>
            设置服务提供器
            </summary>
            <param name="serviceProvider"></param>
            <param name="databaseLoggingWriterType"></param>
        </member>
        <member name="M:ThingsGateway.Logging.DatabaseLoggerProvider.ProcessQueueAsync">
            <summary>
            将日志消息写入数据库中
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThingsGateway.Logging.DatabaseLoggerSettings">
            <summary>
            数据库日志配置类
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.DatabaseLoggerSettings.MinimumLevel">
            <summary>
            最低日志记录级别
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.DatabaseLoggerSettings.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间戳，默认 false
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.DatabaseLoggerSettings.DateFormat">
            <summary>
            日期格式化
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.DatabaseLoggerSettings.IncludeScopes">
            <summary>
            是否启用日志上下文
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.DatabaseLoggerSettings.IgnoreReferenceLoop">
            <summary>
            忽略日志循环输出
            </summary>
            <remarks>对性能有些许影响</remarks>
        </member>
        <member name="P:ThingsGateway.Logging.DatabaseLoggerSettings.WithTraceId">
            <summary>
            显示跟踪/请求 Id
            </summary>
        </member>
        <member name="T:ThingsGateway.Logging.DatabaseWriteError">
            <summary>
            数据库写入错误信息上下文
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.DatabaseWriteError.#ctor(System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="exception">异常对象</param>
        </member>
        <member name="P:ThingsGateway.Logging.DatabaseWriteError.Exception">
            <summary>
            引起数据库写入异常信息
            </summary>
        </member>
        <member name="T:ThingsGateway.Logging.IDatabaseLoggingWriter">
            <summary>
            数据库日志写入器
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.IDatabaseLoggingWriter.WriteAsync(ThingsGateway.Logging.LogMessage,System.Boolean)">
            <summary>
            写入数据库
            </summary>
            <param name="logMsg">结构化日志消息</param>
            <param name="flush">清除缓冲区</param>
            <returns><see cref="T:System.Threading.Tasks.Task" /></returns>
        </member>
        <member name="T:ThingsGateway.Logging.EmptyLogger">
            <summary>
            空日志记录器
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="M:ThingsGateway.Logging.EmptyLogger.BeginScope``1(``0)">
            <summary>
            开始逻辑操作范围
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="state">要写入的项/对象</param>
            <returns><see cref="T:System.IDisposable" /></returns>
        </member>
        <member name="M:ThingsGateway.Logging.EmptyLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            检查是否已启用给定日志级别
            </summary>
            <param name="logLevel">日志级别</param>
            <returns><see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:ThingsGateway.Logging.EmptyLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            写入日志项
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="logLevel">日志级别</param>
            <param name="eventId">事件 Id</param>
            <param name="state">要写入的项/对象</param>
            <param name="exception">异常对象</param>
            <param name="formatter">日志格式化器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:ThingsGateway.Logging.EmptyLoggerProvider">
            <summary>
            空日志记录器提供程序
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="F:ThingsGateway.Logging.EmptyLoggerProvider._emptyLoggers">
            <summary>
            存储多日志分类日志记录器
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.EmptyLoggerProvider.CreateLogger(System.String)">
            <summary>
            创建空日志记录器
            </summary>
            <param name="categoryName">日志分类名</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILogger" /></returns>
        </member>
        <member name="M:ThingsGateway.Logging.EmptyLoggerProvider.Dispose">
            <summary>
            释放非托管资源
            </summary>
            <remarks>控制日志消息队列</remarks>
        </member>
        <member name="T:ThingsGateway.Logging.FileLogger">
            <summary>
            文件日志记录器
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="F:ThingsGateway.Logging.FileLogger._logName">
            <summary>
            记录器类别名称
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.FileLogger._fileLoggerProvider">
            <summary>
            文件日志记录器提供器
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.FileLogger._options">
            <summary>
            日志配置选项
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.FileLogger.#ctor(System.String,ThingsGateway.Logging.FileLoggerProvider)">
            <summary>
            构造函数
            </summary>
            <param name="logName">记录器类别名称</param>
            <param name="fileLoggerProvider">文件日志记录器提供器</param>
        </member>
        <member name="M:ThingsGateway.Logging.FileLogger.BeginScope``1(``0)">
            <summary>
            开始逻辑操作范围
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="state">要写入的项/对象</param>
            <returns><see cref="T:System.IDisposable" /></returns>
        </member>
        <member name="M:ThingsGateway.Logging.FileLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            检查是否已启用给定日志级别
            </summary>
            <param name="logLevel">日志级别</param>
            <returns><see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:ThingsGateway.Logging.FileLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            写入日志项
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="logLevel">日志级别</param>
            <param name="eventId">事件 Id</param>
            <param name="state">要写入的项/对象</param>
            <param name="exception">异常对象</param>
            <param name="formatter">日志格式化器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:ThingsGateway.Logging.FileLoggerOptions">
            <summary>
            文件日志记录器配置选项
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerOptions.Append">
            <summary>
            追加到已存在日志文件或覆盖它们
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerOptions.FileSizeLimitBytes">
            <summary>
            控制每一个日志文件最大存储大小，默认无限制，单位是 B，也就是 1024 才等于 1KB
            </summary>
            <remarks>如果指定了该值，那么日志文件大小超出了该配置就会创建的日志文件，新创建的日志文件命名规则：文件名+[递增序号].log</remarks>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerOptions.MaxRollingFiles">
            <summary>
            控制最大创建的日志文件数量，默认无限制，配合 <see cref="P:ThingsGateway.Logging.FileLoggerOptions.FileSizeLimitBytes" /> 使用
            </summary>
            <remarks>如果指定了该值，那么超出该值将从最初日志文件中从头写入覆盖</remarks>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerOptions.MinimumLevel">
            <summary>
            最低日志记录级别
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerOptions.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间戳，默认 false
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerOptions.MessageFormat">
            <summary>
            自定义日志消息格式化程序
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerOptions.WriteFilter">
            <summary>
            自定义日志筛选器
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerOptions.FileNameRule">
             <summary>
             自定义日志文件名格式化程序（规则）
             </summary>
             <example>
             options.FileNameRule = (fileName) => {
                 return String.Format(Path.GetFileNameWithoutExtension(fileName) + "_{0:yyyy}-{0:MM}-{0:dd}" + Path.GetExtension(fileName), DateTime.UtcNow);

                 // 或者每天创建一个文件
                 // return String.Format(fileName, DateTime.UtcNow);
             }
             </example>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerOptions.HandleWriteError">
            <summary>
            自定义日志文件写入错误程序
            </summary>
            <remarks>主要解决日志在写入过程中文件被打开或其他应用程序占用的情况，一旦出现上述情况可创建备用日志文件继续写入</remarks>
            <example>
            options.HandleWriteError = (err) => {
                err.UseRollbackFileName(Path.GetFileNameWithoutExtension(err.CurrentFileName)+ "_alt" + Path.GetExtension(err.CurrentFileName));
            };
            </example>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerOptions.DateFormat">
            <summary>
            日期格式化
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerOptions.IncludeScopes">
            <summary>
            是否启用日志上下文
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerOptions.WithTraceId">
            <summary>
            显示跟踪/请求 Id
            </summary>
        </member>
        <member name="T:ThingsGateway.Logging.FileLoggerProvider">
            <summary>
            文件日志记录器提供程序
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="F:ThingsGateway.Logging.FileLoggerProvider._fileLoggers">
            <summary>
            存储多日志分类日志记录器
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.FileLoggerProvider._logMessageQueue">
            <summary>
            日志消息队列（线程安全）
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.FileLoggerProvider._scopeProvider">
            <summary>
            日志作用域提供器
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.FileLoggerProvider._rollingFileNames">
            <summary>
            记录日志所有滚动文件名
            </summary>
            <remarks>只有 MaxRollingFiles 和 FileSizeLimitBytes 大于 0 有效</remarks>
        </member>
        <member name="F:ThingsGateway.Logging.FileLoggerProvider._fileLoggingWriter">
            <summary>
            文件日志写入器
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.FileLoggerProvider._processQueueTask">
            <summary>
            长时间运行的后台任务
            </summary>
            <remarks>实现不间断写入</remarks>
        </member>
        <member name="M:ThingsGateway.Logging.FileLoggerProvider.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fileName">日志文件名</param>
        </member>
        <member name="M:ThingsGateway.Logging.FileLoggerProvider.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="fileName">日志文件名</param>
            <param name="append">追加到已存在日志文件或覆盖它们</param>
        </member>
        <member name="M:ThingsGateway.Logging.FileLoggerProvider.#ctor(System.String,ThingsGateway.Logging.FileLoggerOptions)">
            <summary>
            构造函数
            </summary>
            <param name="fileName">日志文件名</param>
            <param name="fileLoggerOptions">文件日志记录器配置选项</param>
        </member>
        <member name="F:ThingsGateway.Logging.FileLoggerProvider.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerProvider.LoggerOptions">
            <summary>
            文件日志记录器配置选项
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerProvider.ScopeProvider">
            <summary>
            日志作用域提供器
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.FileLoggerProvider.CreateLogger(System.String)">
            <summary>
            创建文件日志记录器
            </summary>
            <param name="categoryName">日志分类名</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILogger" /></returns>
        </member>
        <member name="M:ThingsGateway.Logging.FileLoggerProvider.SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider)">
            <summary>
            设置作用域提供器
            </summary>
            <param name="scopeProvider"></param>
        </member>
        <member name="M:ThingsGateway.Logging.FileLoggerProvider.Dispose">
            <summary>
            释放非托管资源
            </summary>
            <remarks>控制日志消息队列</remarks>
        </member>
        <member name="M:ThingsGateway.Logging.FileLoggerProvider.WriteToQueue(ThingsGateway.Logging.LogMessage)">
            <summary>
            将日志消息写入队列中等待后台任务出队写入文件
            </summary>
            <param name="logMsg">日志消息</param>
        </member>
        <member name="M:ThingsGateway.Logging.FileLoggerProvider.ProcessQueueAsync">
            <summary>
            将日志消息写入文件中
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Logging.FileLoggerSettings">
            <summary>
            文件日志配置类
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerSettings.FileName">
            <summary>
            日志文件完整路径或文件名，推荐 .log 作为拓展名
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerSettings.Append">
            <summary>
            追加到已存在日志文件或覆盖它们
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerSettings.FileSizeLimitBytes">
            <summary>
            控制每一个日志文件最大存储大小，默认无限制，单位是 B，也就是 1024 才等于 1KB
            </summary>
            <remarks>如果指定了该值，那么日志文件大小超出了该配置就会创建的日志文件，新创建的日志文件命名规则：文件名+[递增序号].log</remarks>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerSettings.MaxRollingFiles">
            <summary>
            控制最大创建的日志文件数量，默认无限制，配合 <see cref="P:ThingsGateway.Logging.FileLoggerSettings.FileSizeLimitBytes" /> 使用
            </summary>
            <remarks>如果指定了该值，那么超出该值将从最初日志文件中从头写入覆盖</remarks>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerSettings.MinimumLevel">
            <summary>
            最低日志记录级别
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerSettings.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间戳，默认 false
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerSettings.DateFormat">
            <summary>
            日期格式化
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerSettings.IncludeScopes">
            <summary>
            是否启用日志上下文
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.FileLoggerSettings.WithTraceId">
            <summary>
            显示跟踪/请求 Id
            </summary>
        </member>
        <member name="T:ThingsGateway.Logging.FileLoggingWriter">
            <summary>
            文件日志写入器
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.FileLoggingWriter._fileLoggerProvider">
            <summary>
            文件日志记录器提供程序
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.FileLoggingWriter._options">
            <summary>
            日志配置选项
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.FileLoggingWriter._fileName">
            <summary>
            日志文件名
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.FileLoggingWriter._fileStream">
            <summary>
            文件流
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.FileLoggingWriter._textWriter">
            <summary>
            文本写入器
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.FileLoggingWriter.__LastBaseFileName">
            <summary>
            缓存上次返回的基本日志文件名，避免重复解析
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.FileLoggingWriter._isEnabledRollingFiles">
            <summary>
            判断是否启动滚动日志功能
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.FileLoggingWriter.#ctor(ThingsGateway.Logging.FileLoggerProvider)">
            <summary>
            构造函数
            </summary>
            <param name="fileLoggerProvider">文件日志记录器提供程序</param>
        </member>
        <member name="M:ThingsGateway.Logging.FileLoggingWriter.GetBaseFileName">
            <summary>
            获取日志基础文件名
            </summary>
            <returns>日志文件名</returns>
        </member>
        <member name="M:ThingsGateway.Logging.FileLoggingWriter.GetCurrentFileName">
            <summary>
            解析当前写入日志的文件名
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.FileLoggingWriter.GetNextFileName">
            <summary>
            获取下一个匹配的日志文件名
            </summary>
            <remarks>只有配置了 <see cref="P:ThingsGateway.Logging.FileLoggerOptions.FileSizeLimitBytes" /> 或 <see cref="P:ThingsGateway.Logging.FileLoggerOptions.FileNameRule" /> 或 <see cref="P:ThingsGateway.Logging.FileLoggerOptions.MaxRollingFiles" /> 有效</remarks>
            <returns>新的文件名</returns>
        </member>
        <member name="M:ThingsGateway.Logging.FileLoggingWriter.OpenFile(System.Boolean)">
            <summary>
            打开文件
            </summary>
            <param name="append"></param>
        </member>
        <member name="M:ThingsGateway.Logging.FileLoggingWriter.CheckForNewLogFile">
            <summary>
            判断是否需要创建新文件写入
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.FileLoggingWriter.DropFilesIfOverLimit(System.IO.FileInfo)">
            <summary>
            删除超出滚动日志限制的文件
            </summary>
            <param name="fileInfo"></param>
        </member>
        <member name="M:ThingsGateway.Logging.FileLoggingWriter.WriteAsync(ThingsGateway.Logging.LogMessage,System.Boolean)">
            <summary>
            写入文件
            </summary>
            <param name="logMsg">日志消息</param>
            <param name="flush"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Logging.FileLoggingWriter.Close">
            <summary>
            关闭文本写入器并释放
            </summary>
        </member>
        <member name="T:ThingsGateway.Logging.FileWriteError">
            <summary>
            文件写入错误信息上下文
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.FileWriteError.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="currentFileName">当前日志文件名</param>
            <param name="exception">异常对象</param>
        </member>
        <member name="P:ThingsGateway.Logging.FileWriteError.CurrentFileName">
            <summary>
            当前日志文件名
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.FileWriteError.Exception">
            <summary>
            引起文件写入异常信息
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.FileWriteError.RollbackFileName">
            <summary>
            备用日志文件名
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.FileWriteError.UseRollbackFileName(System.String)">
            <summary>
            配置日志文件写入错误后新的备用日志文件名
            </summary>
            <param name="rollbackFileName">备用日志文件名</param>
        </member>
        <member name="T:ThingsGateway.Logging.LogContext">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.LogContext.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LogContext.Properties">
            <summary>
            日志上下文数据
            </summary>
        </member>
        <member name="T:ThingsGateway.Logging.LogMessage">
            <summary>
            日志结构化消息
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.LogMessage.#ctor(System.String,Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String,System.Exception,ThingsGateway.Logging.LogContext,System.Object,System.DateTime,System.Int32,System.Boolean,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="logName">记录器类别名称</param>
            <param name="logLevel">日志级别</param>
            <param name="eventId">事件 Id</param>
            <param name="message">日志消息</param>
            <param name="exception">异常对象</param>
            <param name="context">日志上下文</param>
            <param name="state">当前状态值</param>
            <param name="logDateTime">日志记录时间</param>
            <param name="threadId">线程 Id</param>
            <param name="useUtcTimestamp">是否使用 UTC 时间戳</param>
            <param name="traceId">请求/跟踪 Id</param>
        </member>
        <member name="P:ThingsGateway.Logging.LogMessage.LogName">
            <summary>
            记录器类别名称
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LogMessage.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LogMessage.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LogMessage.Message">
            <summary>
            日志消息
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LogMessage.Exception">
            <summary>
            异常对象
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LogMessage.State">
            <summary>
            当前状态值
            </summary>
            <remarks>可以是任意类型</remarks>
        </member>
        <member name="P:ThingsGateway.Logging.LogMessage.LogDateTime">
            <summary>
            日志记录时间
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LogMessage.ThreadId">
            <summary>
            线程 Id
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LogMessage.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间戳
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LogMessage.TraceId">
            <summary>
            请求/跟踪 Id
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LogMessage.Context">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.LogMessage.ToString">
            <summary>
            重写默认输出
            </summary>
            <returns><see cref="T:System.String" /></returns>
        </member>
        <member name="T:ThingsGateway.Logging.ContractResolverTypes">
            <summary>
            LoggingMonitor 序列化属性命名规则选项
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.ContractResolverTypes.CamelCase">
            <summary>
            CamelCase 小驼峰
            </summary>
            <remarks>默认值</remarks>
        </member>
        <member name="F:ThingsGateway.Logging.ContractResolverTypes.Default">
            <summary>
            保持原样
            </summary>
        </member>
        <member name="T:ThingsGateway.Logging.JsonElementConverter">
            <summary>
            解决 JsonElement 问题
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.JsonElementConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Text.Json.JsonElement,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Logging.JsonElementConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Text.Json.JsonElement,Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:ThingsGateway.Logging.LoggingMonitorMethod">
            <summary>
            LoggingMonitor 方法配置
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorMethod.FullName">
            <summary>
            方法名称
            </summary>
            <remarks>完全限定名</remarks>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorMethod.WithReturnValue">
            <summary>
            是否记录返回值
            </summary>
            <remarks>bool 类型，默认输出</remarks>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorMethod.ReturnValueThreshold">
            <summary>
            设置返回值阈值
            </summary>
            <remarks>配置返回值字符串阈值，超过这个阈值将截断，默认全量输出</remarks>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorMethod.IgnorePropertyNames">
            <summary>
            配置序列化忽略的属性名称
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorMethod.IgnorePropertyTypes">
            <summary>
            配置序列化忽略的属性类型
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorMethod.JsonIndented">
            <summary>
            JSON 输出格式化
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorMethod.LongTypeConverter">
            <summary>
            是否处理 Long 转 String
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorMethod.ContractResolver">
            <summary>
            序列化属性命名规则（返回值）
            </summary>
        </member>
        <member name="T:ThingsGateway.Logging.LoggingMonitorSettings">
            <summary>
            日志监视器配置
            </summary>
            <remarks>默认配置节点：Logging:Monitor，支持自定义</remarks>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorSettings.GlobalEnabled">
            <summary>
            全局启用
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorSettings.IncludeOfMethods">
            <summary>
            配置包含拦截的方法名列表（完全限定名格式：程序集名称.类名.方法名），注意无需添加参数签名
            </summary>
            <remarks>结合 <seealso cref="P:ThingsGateway.Logging.LoggingMonitorSettings.GlobalEnabled" /> 使用，当 <see cref="P:ThingsGateway.Logging.LoggingMonitorSettings.GlobalEnabled" /> 为 false 时有效，</remarks>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorSettings.ExcludeOfMethods">
            <summary>
            配置排除拦截的方法名列表（完全限定名格式：程序集名称.类名.方法名），注意无需添加参数签名
            </summary>
            <remarks>结合 <seealso cref="P:ThingsGateway.Logging.LoggingMonitorSettings.GlobalEnabled" /> 使用，当 <see cref="P:ThingsGateway.Logging.LoggingMonitorSettings.GlobalEnabled" /> 为 true 时有效，</remarks>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorSettings.MethodsSettings">
            <summary>
            配置方法更多信息
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorSettings.Configure">
            <summary>
            添加日志更多配置
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.LoggingMonitorSettings.ConfigureLogger(System.Action{Microsoft.Extensions.Logging.ILogger,ThingsGateway.Logging.LogContext,Microsoft.AspNetCore.Mvc.Filters.FilterContext})">
            <summary>
            配置日志更多功能
            </summary>
            <param name="configure"></param>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorSettings.BahLogLevel">
            <summary>
            业务日志消息级别
            </summary>
            <remarks>控制 Oops.Oh 或 Oops.Bah 日志记录位置，默认写入 <see cref="F:Microsoft.Extensions.Logging.LogLevel.Information" /></remarks>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorSettings.LogLevel">
            <summary>
            默认输出日志级别
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorSettings.WithReturnValue">
            <summary>
            是否记录返回值
            </summary>
            <remarks>bool 类型，默认输出</remarks>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorSettings.IsMvcFilterRegister">
            <summary>
            是否 Mvc Filter 方式注册
            </summary>
            <remarks>解决过去 Mvc Filter 全局注册的问题</remarks>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorSettings.FromGlobalFilter">
            <summary>
            是否来自全局触发器
            </summary>
            <remarks>解决局部和全局触发器同时配置触发两次问题</remarks>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorSettings.ReturnValueThreshold">
            <summary>
            设置返回值阈值
            </summary>
            <remarks>配置返回值字符串阈值，超过这个阈值将截断，默认全量输出</remarks>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorSettings.ContractResolver">
            <summary>
            配置 序列化属性命名规则（返回值）
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorSettings.IgnorePropertyNames">
            <summary>
            配置序列化忽略的属性名称
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorSettings.IgnorePropertyTypes">
            <summary>
            配置序列化忽略的属性类型
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorSettings.JsonIndented">
            <summary>
            JSON 输出格式化
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorSettings.LongTypeConverter">
            <summary>
            是否处理 Long 转 String
            </summary>
        </member>
        <member name="P:ThingsGateway.Logging.LoggingMonitorSettings.JsonWriterOptions">
            <summary>
            配置 Json 写入选项
            </summary>
        </member>
        <member name="T:ThingsGateway.Logging.CamelCasePropertyNamesContractResolverWithIgnoreProperties">
            <summary>
            支持忽略特定属性的 CamelCase 序列化
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.CamelCasePropertyNamesContractResolverWithIgnoreProperties._names">
            <summary>
            被忽略的属性名称
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.CamelCasePropertyNamesContractResolverWithIgnoreProperties._type">
            <summary>
            被忽略的属性类型
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.CamelCasePropertyNamesContractResolverWithIgnoreProperties.#ctor(System.String[],System.Type[])">
            <summary>
            构造函数
            </summary>
            <param name="names"></param>
            <param name="types"></param>
        </member>
        <member name="M:ThingsGateway.Logging.CamelCasePropertyNamesContractResolverWithIgnoreProperties.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>
            重写需要序列化的属性名
            </summary>
            <param name="type"></param>
            <param name="memberSerialization"></param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Logging.DefaultContractResolverWithIgnoreProperties">
            <summary>
            支持忽略特定属性的 Default 序列化
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.DefaultContractResolverWithIgnoreProperties._names">
            <summary>
            被忽略的属性名称
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.DefaultContractResolverWithIgnoreProperties._type">
            <summary>
            被忽略的属性类型
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.DefaultContractResolverWithIgnoreProperties.#ctor(System.String[],System.Type[])">
            <summary>
            构造函数
            </summary>
            <param name="names"></param>
            <param name="types"></param>
        </member>
        <member name="M:ThingsGateway.Logging.DefaultContractResolverWithIgnoreProperties.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>
            重写需要序列化的属性名
            </summary>
            <param name="type"></param>
            <param name="memberSerialization"></param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Logging.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:ThingsGateway.Logging.Penetrates.EXCEPTION_SEPARATOR">
            <summary>
            异常分隔符
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.Penetrates.CreateFromConfiguration(System.Func{System.String},System.Action{ThingsGateway.Logging.FileLoggerOptions})">
            <summary>
            从配置文件中加载配置并创建文件日志记录器提供程序
            </summary>
            <param name="configuraionKey">获取配置文件对应的 Key</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:ThingsGateway.Logging.FileLoggerProvider" /></returns>
        </member>
        <member name="M:ThingsGateway.Logging.Penetrates.CreateFromConfiguration(System.Func{System.String},System.Action{ThingsGateway.Logging.DatabaseLoggerOptions})">
            <summary>
            从配置文件中加载配置并创建数据库日志记录器提供程序
            </summary>
            <param name="configuraionKey">获取配置文件对应的 Key</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:ThingsGateway.Logging.DatabaseLoggerProvider" /></returns>
        </member>
        <member name="M:ThingsGateway.Logging.Penetrates.OutputStandardMessage(ThingsGateway.Logging.LogMessage,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            输出标准日志消息
            </summary>
            <param name="logMsg"></param>
            <param name="dateFormat"></param>
            <param name="disableColors"></param>
            <param name="isConsole"></param>
            <param name="withTraceId"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Logging.Penetrates.PadLeftAlign(System.String)">
            <summary>
            将日志内容进行对齐
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Logging.Penetrates.GetLogLevelString(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            获取日志级别短名称
            </summary>
            <param name="logLevel">日志级别</param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Logging.Penetrates.SetLogContext(Microsoft.Extensions.Logging.IExternalScopeProvider,ThingsGateway.Logging.LogMessage,System.Boolean)">
            <summary>
            设置日志上下文
            </summary>
            <param name="scopeProvider"></param>
            <param name="logMsg"></param>
            <param name="includeScopes"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Logging.Penetrates.AppendWithColor(System.Text.StringBuilder,System.String,ThingsGateway.Logging.ConsoleColors)">
            <summary>
            拓展 StringBuilder 增加带颜色写入
            </summary>
            <param name="message"></param>
            <param name="colors"></param>
            <param name="formatString"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Logging.Penetrates.GetForegroundColorEscapeCode(System.ConsoleColor)">
            <summary>
            输出控制台字体颜色 UniCode 码
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Logging.Penetrates.GetBackgroundColorEscapeCode(System.ConsoleColor)">
            <summary>
            输出控制台背景颜色 UniCode 码
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Logging.Penetrates.GetLogLevelConsoleColors(Microsoft.Extensions.Logging.LogLevel,System.Boolean)">
            <summary>
            获取控制台日志级别对应的颜色
            </summary>
            <param name="logLevel"></param>
            <param name="disableColors"></param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Logging.Log">
            <summary>
            全局日志静态类
            </summary>
        </member>
        <member name="M:ThingsGateway.Logging.Log.CreateLogger``1">
            <summary>
            创建日志记录器
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Logging.Log.CreateLoggerFactory(System.Action{Microsoft.Extensions.Logging.ILoggingBuilder})">
            <summary>
            创建日志工厂
            </summary>
            <param name="configure">日志构建器</param>
            <remarks><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> 实现了 <see cref="T:System.IDisposable" /> 接口，注意使用 `using` 控制</remarks>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.NewtonsoftJsonDateOnlyJsonConverter">
            <summary>
            DateOnly 类型序列化
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonDateOnlyJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonDateOnlyJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.NewtonsoftJsonDateOnlyJsonConverter.Format">
            <summary>
            日期格式化格式
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonDateOnlyJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.DateOnly,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonDateOnlyJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.DateOnly,Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableDateOnlyJsonConverter">
            <summary>
            DateOnly? 类型序列化
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableDateOnlyJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableDateOnlyJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableDateOnlyJsonConverter.Format">
            <summary>
            日期格式化格式
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableDateOnlyJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Nullable{System.DateOnly},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableDateOnlyJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Nullable{System.DateOnly},Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.NewtonsoftJsonDateTimeJsonConverter">
            <summary>
            DateTime 类型序列化
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonDateTimeJsonConverter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonDateTimeJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.NewtonsoftJsonDateTimeJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonDateTimeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.DateTime,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonDateTimeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.DateTime,Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.NewtonsoftNullableJsonDateTimeJsonConverter">
            <summary>
            DateTime 类型序列化
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftNullableJsonDateTimeJsonConverter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftNullableJsonDateTimeJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.NewtonsoftNullableJsonDateTimeJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftNullableJsonDateTimeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Nullable{System.DateTime},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftNullableJsonDateTimeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Nullable{System.DateTime},Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.NewtonsoftJsonDateTimeOffsetJsonConverter">
            <summary>
            DateTimeOffset 类型序列化
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonDateTimeOffsetJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonDateTimeOffsetJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonDateTimeOffsetJsonConverter.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
            <param name="outputToLocalDateTime"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.NewtonsoftJsonDateTimeOffsetJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.NewtonsoftJsonDateTimeOffsetJsonConverter.Localized">
            <summary>
            是否输出为为当地时间
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonDateTimeOffsetJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.DateTimeOffset,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonDateTimeOffsetJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.DateTimeOffset,Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableDateTimeOffsetJsonConverter">
            <summary>
            DateTimeOffset 类型序列化
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableDateTimeOffsetJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableDateTimeOffsetJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableDateTimeOffsetJsonConverter.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
            <param name="outputToLocalDateTime"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableDateTimeOffsetJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableDateTimeOffsetJsonConverter.Localized">
            <summary>
            是否输出为为当地时间
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableDateTimeOffsetJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Nullable{System.DateTimeOffset},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableDateTimeOffsetJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Nullable{System.DateTimeOffset},Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.NewtonsoftJsonLongToStringJsonConverter">
            <summary>
            解决 long 精度问题
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonLongToStringJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonLongToStringJsonConverter.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="overMaxLengthOf17"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.NewtonsoftJsonLongToStringJsonConverter.OverMaxLengthOf17">
            <summary>
            是否超过最大长度 17 再处理
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonLongToStringJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Int64,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonLongToStringJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Int64,Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableLongToStringJsonConverter">
            <summary>
            解决 long? 精度问题
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableLongToStringJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableLongToStringJsonConverter.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="overMaxLengthOf17"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableLongToStringJsonConverter.OverMaxLengthOf17">
            <summary>
            是否超过最大长度 17 再处理
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableLongToStringJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Nullable{System.Int64},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableLongToStringJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Nullable{System.Int64},Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.NewtonsoftJsonTimeOnlyJsonConverter">
            <summary>
            TimeOnly 类型序列化
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonTimeOnlyJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonTimeOnlyJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.NewtonsoftJsonTimeOnlyJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonTimeOnlyJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.TimeOnly,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonTimeOnlyJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.TimeOnly,Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableTimeOnlyJsonConverter">
            <summary>
            TimeOnly? 类型序列化
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableTimeOnlyJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableTimeOnlyJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableTimeOnlyJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableTimeOnlyJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Nullable{System.TimeOnly},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="hasExistingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.NewtonsoftJsonNullableTimeOnlyJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Nullable{System.TimeOnly},Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.SystemTextJsonDateOnlyJsonConverter">
            <summary>
            DateOnly 类型序列化
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonDateOnlyJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonDateOnlyJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.SystemTextJsonDateOnlyJsonConverter.Format">
            <summary>
            日期格式化格式
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonDateOnlyJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonDateOnlyJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateOnly,System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateOnlyJsonConverter">
            <summary>
            DateOnly? 类型序列化
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateOnlyJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateOnlyJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateOnlyJsonConverter.Format">
            <summary>
            日期格式化格式
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateOnlyJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateOnlyJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Nullable{System.DateOnly},System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.SystemTextJsonDateTimeJsonConverter">
            <summary>
            DateTime 类型序列化
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonDateTimeJsonConverter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonDateTimeJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.SystemTextJsonDateTimeJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonDateTimeJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonDateTimeJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateTimeJsonConverter">
            <summary>
            DateTime? 类型序列化
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateTimeJsonConverter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateTimeJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateTimeJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateTimeJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateTimeJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Nullable{System.DateTime},System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.SystemTextJsonDateTimeOffsetJsonConverter">
            <summary>
            DateTimeOffset 类型序列化
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonDateTimeOffsetJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonDateTimeOffsetJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonDateTimeOffsetJsonConverter.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
            <param name="outputToLocalDateTime"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.SystemTextJsonDateTimeOffsetJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.SystemTextJsonDateTimeOffsetJsonConverter.Localized">
            <summary>
            是否输出为为当地时间
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonDateTimeOffsetJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonDateTimeOffsetJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTimeOffset,System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateTimeOffsetJsonConverter">
            <summary>
            DateTimeOffset? 类型序列化
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateTimeOffsetJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateTimeOffsetJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateTimeOffsetJsonConverter.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
            <param name="outputToLocalDateTime"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateTimeOffsetJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateTimeOffsetJsonConverter.Localized">
            <summary>
            是否输出为为当地时间
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateTimeOffsetJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableDateTimeOffsetJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Nullable{System.DateTimeOffset},System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.SystemTextJsonLongToStringJsonConverter">
            <summary>
            解决 long 精度问题
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonLongToStringJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonLongToStringJsonConverter.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="overMaxLengthOf17"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.SystemTextJsonLongToStringJsonConverter.OverMaxLengthOf17">
            <summary>
            是否超过最大长度 17 再处理
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonLongToStringJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonLongToStringJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Int64,System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.SystemTextJsonNullableLongToStringJsonConverter">
            <summary>
            解决 long? 精度问题
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableLongToStringJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableLongToStringJsonConverter.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="overMaxLengthOf17"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.SystemTextJsonNullableLongToStringJsonConverter.OverMaxLengthOf17">
            <summary>
            是否超过最大长度 17 再处理
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableLongToStringJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableLongToStringJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Nullable{System.Int64},System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.SystemTextJsonTimeOnlyJsonConverter">
            <summary>
            TimeOnly 类型序列化
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonTimeOnlyJsonConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonTimeOnlyJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.SystemTextJsonTimeOnlyJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonTimeOnlyJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonTimeOnlyJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.TimeOnly,System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.SystemTextJsonNullableTimeOnlyJsonConverter">
            <summary>
            TimeOnly? 类型序列化
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableTimeOnlyJsonConverter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableTimeOnlyJsonConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:ThingsGateway.JsonSerialization.SystemTextJsonNullableTimeOnlyJsonConverter.Format">
            <summary>
            时间格式化格式
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableTimeOnlyJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            反序列化
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonNullableTimeOnlyJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Nullable{System.TimeOnly},System.Text.Json.JsonSerializerOptions)">
            <summary>
            序列化
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.Penetrates.ConvertToDateTime(System.Text.Json.Utf8JsonReader@)">
            <summary>
            转换
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.Penetrates.ConvertToDateTime(Newtonsoft.Json.JsonReader@)">
            <summary>
            转换
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.JSON">
            <summary>
            JSON 静态帮助类
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.JSON.GetJsonSerializer">
            <summary>
            获取 JSON 序列化提供器
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.JSON.Serialize(System.Object,System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="value"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.JSON.Deserialize``1(System.String,System.Object)">
            <summary>
            反序列化字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.JSON.GetSerializerOptions``1">
            <summary>
            获取 JSON 配置选项
            </summary>
            <typeparam name="TOptions"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.JSON.IsValid(System.String)">
            <summary>
            检查 JSON 字符串是否有效
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.IJsonSerializerProvider">
            <summary>
            Json 序列化提供器
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.IJsonSerializerProvider.Serialize(System.Object,System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="value"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.IJsonSerializerProvider.Deserialize``1(System.String,System.Object)">
            <summary>
            反序列化字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.IJsonSerializerProvider.Deserialize(System.String,System.Type,System.Object)">
            <summary>
            反序列化字符串
            </summary>
            <param name="json"></param>
            <param name="returnType"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.IJsonSerializerProvider.GetSerializerOptions">
            <summary>
            返回读取全局配置的 JSON 选项
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.JsonSerialization.SystemTextJsonSerializerProvider">
            <summary>
            System.Text.Json 序列化提供器（默认实现）
            </summary>
        </member>
        <member name="F:ThingsGateway.JsonSerialization.SystemTextJsonSerializerProvider._jsonOptions">
            <summary>
            获取 JSON 配置选项
            </summary>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonSerializerProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.JsonOptions})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonSerializerProvider.Serialize(System.Object,System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="value"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonSerializerProvider.Deserialize``1(System.String,System.Object)">
            <summary>
            反序列化字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonSerializerProvider.Deserialize(System.String,System.Type,System.Object)">
            <summary>
            反序列化字符串
            </summary>
            <param name="json"></param>
            <param name="returnType"></param>
            <param name="jsonSerializerOptions"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.JsonSerialization.SystemTextJsonSerializerProvider.GetSerializerOptions">
            <summary>
            返回读取全局配置的 JSON 选项
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.NonUnifyAttribute">
            <summary>
            禁止规范化处理
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContextExtensions">
            <summary>
            授权处理上下文拓展类
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContextExtensions.GetCurrentHttpContext(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <summary>
            获取当前 HttpContext 上下文
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.HttpContextExtensions">
            <summary>
            Http 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetMetadata``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 Action 特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetControllerActionDescriptor(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 控制器/Action 描述器
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.SigninToSwagger(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            设置规范化文档自动登录
            </summary>
            <param name="httpContext"></param>
            <param name="accessToken"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.SignoutToSwagger(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            设置规范化文档退出登录
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.SetTokensOfResponseHeaders(Microsoft.AspNetCore.Http.HttpContext,System.String,System.String)">
            <summary>
            设置响应头 Tokens
            </summary>
            <param name="httpContext"></param>
            <param name="accessToken"></param>
            <param name="refreshToken"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetLocalIpAddressToIPv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取本机 IPv4地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetLocalIpAddressToIPv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取本机 IPv6地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRemoteIpAddressToIPv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取远程 IPv4地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRemoteIpAddressToIPv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取远程 IPv6地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRequestUrlAddress(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取完整请求地址
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.GetRefererUrlAddress(Microsoft.AspNetCore.Http.HttpRequest,System.String)">
            <summary>
            获取来源地址
            </summary>
            <param name="request"></param>
            <param name="refererHeaderKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.ReadBodyContentAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            读取 Body 内容
            </summary>
            <param name="httpContext"></param>
            <remarks>需先在 Startup 的 Configure 中注册 app.EnableBuffering()</remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.ReadBodyContentAsync(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            读取 Body 内容
            </summary>
            <param name="request"></param>
            <remarks>需先在 Startup 的 Configure 中注册 app.EnableBuffering()</remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpContextExtensions.IsWebSocketRequest(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            判断是否是 WebSocket 请求
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.AspNetCoreBuilderServiceCollectionExtensions">
            <summary>
            ASP.NET Core 服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AspNetCoreBuilderServiceCollectionExtensions.AddMvcFilter``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})">
            <summary>
            注册 Mvc 过滤器
            </summary>
            <typeparam name="TFilter"></typeparam>
            <param name="mvcBuilder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AspNetCoreBuilderServiceCollectionExtensions.AddMvcFilter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})">
            <summary>
            注册 Mvc 过滤器
            </summary>
            <typeparam name="TFilter"></typeparam>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.AspNetCoreBuilderServiceCollectionExtensions.AddMvcFilter(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata,System.Action{Microsoft.AspNetCore.Mvc.MvcOptions})">
            <summary>
            注册 Mvc 过滤器
            </summary>
            <param name="services"></param>
            <param name="filter"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions">
            <summary>
            日志服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddConsoleFormatter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{ThingsGateway.Logging.ConsoleFormatterExtendOptions})">
            <summary>
            添加控制台默认格式化器
            </summary>
            <param name="services"></param>
            <param name="configure">添加更多配置</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddMonitorLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{ThingsGateway.Logging.LoggingMonitorSettings},System.String)">
            <summary>
            添加日志监视器服务
            </summary>
            <param name="services"></param>
            <param name="configure">添加更多配置</param>
            <param name="jsonKey">配置文件对于的 Key，默认为 Logging:Monitor</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddFileLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Boolean)">
            <summary>
            添加文件日志服务
            </summary>
            <param name="services"></param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="append">追加到已存在日志文件或覆盖它们</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddFileLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{ThingsGateway.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志服务
            </summary>
            <param name="services"></param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddFileLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{ThingsGateway.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志服务（从配置文件中读取配置）
            </summary>
            <param name="services"></param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddFileLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.String},System.Action{ThingsGateway.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志服务（从配置文件中读取配置）
            </summary>
            <param name="services"></param>
            <param name="configuraionKey">获取配置文件对应的 Key</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddDatabaseLogging``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{ThingsGateway.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志服务
            </summary>
            <param name="services"></param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddDatabaseLogging``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{ThingsGateway.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志服务
            </summary>
            <param name="services"></param>
            <param name="configuraionKey">配置文件对于的 Key</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions.AddDatabaseLogging``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.String},System.Action{ThingsGateway.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志服务
            </summary>
            <param name="services"></param>
            <param name="configuraionKey">获取配置文件对于的 Key</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.JsonSerializationServiceCollectionExtensions">
            <summary>
            Json 序列化服务拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.JsonSerializationServiceCollectionExtensions.AddJsonSerialization``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            配置 Json 序列化提供器
            </summary>
            <typeparam name="TJsonSerializerProvider"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.JsonSerializationServiceCollectionExtensions.AddJsonOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Mvc.JsonOptions})">
            <summary>
            配置 JsonOptions 序列化选项
            <para>主要给非 Web 环境使用</para>
            </summary>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.Startup.CheckSameConfigId">
            <summary>
            检查是否有相同的ConfigId
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Logging.ILoggerExtensions">
            <summary>
            <see cref="T:Microsoft.Extensions.Logging.ILogger" /> 拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerExtensions.ScopeContext(Microsoft.Extensions.Logging.ILogger,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            配置日志上下文
            </summary>
            <param name="logger"></param>
            <param name="properties">建议使用 ConcurrentDictionary 类型</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerExtensions.ScopeContext(Microsoft.Extensions.Logging.ILogger,System.Action{ThingsGateway.Logging.LogContext})">
            <summary>
            配置日志上下文
            </summary>
            <param name="logger"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerExtensions.ScopeContext(Microsoft.Extensions.Logging.ILogger,ThingsGateway.Logging.LogContext)">
            <summary>
            配置日志上下文
            </summary>
            <param name="logger"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Logging.ILoggerFactoryExtensions">
            <summary>
            <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /> 拓展
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddFile(Microsoft.Extensions.Logging.ILoggerFactory,System.String,System.Boolean)">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="factory">日志工厂</param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="append">追加到已存在日志文件或覆盖它们</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddFile(Microsoft.Extensions.Logging.ILoggerFactory,System.String,System.Action{ThingsGateway.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="factory">日志工厂</param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="configure"></param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddFile(Microsoft.Extensions.Logging.ILoggerFactory,System.Action{ThingsGateway.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="factory">日志工厂</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddFile(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String},System.Action{ThingsGateway.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="factory">日志工厂</param>
            <param name="configuraionKey">获取配置文件对应的 Key</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider,System.Action{ThingsGateway.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志记录器
            </summary>
            <typeparam name="TDatabaseLoggingWriter">实现自 <see cref="T:ThingsGateway.Logging.IDatabaseLoggingWriter" /></typeparam>
            <param name="factory">日志工厂</param>
            <param name="serviceProvider">服务提供器</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider,System.String,System.Action{ThingsGateway.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志记录器
            </summary>
            <typeparam name="TDatabaseLoggingWriter">实现自 <see cref="T:ThingsGateway.Logging.IDatabaseLoggingWriter" /></typeparam>
            <param name="factory">日志工厂</param>
            <param name="serviceProvider">服务提供器</param>
            <param name="configuraionKey">配置文件对于的 Key</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggerFactoryExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String},System.IServiceProvider,System.Action{ThingsGateway.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志记录器
            </summary>
            <typeparam name="TDatabaseLoggingWriter">实现自 <see cref="T:ThingsGateway.Logging.IDatabaseLoggingWriter" /></typeparam>
            <param name="factory">日志工厂</param>
            <param name="configuraionKey">获取配置文件对应的 Key</param>
            <param name="serviceProvider">服务提供器</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" /></returns>
        </member>
        <member name="T:Microsoft.Extensions.Logging.ILoggingBuilderExtensions">
            <summary>
            日志构建器拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddConsoleFormatter(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{ThingsGateway.Logging.ConsoleFormatterExtendOptions})">
            <summary>
            添加控制台默认格式化器
            </summary>
            <param name="builder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddFile(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Boolean)">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="builder">日志构建器</param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="append">追加到已存在日志文件或覆盖它们</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddFile(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Action{ThingsGateway.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="builder">日志构建器</param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddFile(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{ThingsGateway.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志记录器（从配置文件中）默认 Key 为："Logging:File"
            </summary>
            <param name="builder">日志构建器</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddFile(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{System.String},System.Action{ThingsGateway.Logging.FileLoggerOptions})">
            <summary>
            添加文件日志记录器（从配置文件中）
            </summary>
            <param name="builder">日志构建器</param>
            <param name="configuraionKey">获取配置文件对应的 Key</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{ThingsGateway.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志记录器
            </summary>
            <typeparam name="TDatabaseLoggingWriter">实现自 <see cref="T:ThingsGateway.Logging.IDatabaseLoggingWriter" /></typeparam>
            <param name="builder">日志构建器</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Action{ThingsGateway.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志记录器
            </summary>
            <typeparam name="TDatabaseLoggingWriter">实现自 <see cref="T:ThingsGateway.Logging.IDatabaseLoggingWriter" /></typeparam>
            <param name="builder">日志构建器</param>
            <param name="configuraionKey">配置文件对于的 Key</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.ILoggingBuilderExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{System.String},System.Action{ThingsGateway.Logging.DatabaseLoggerOptions})">
            <summary>
            添加数据库日志记录器（从配置文件中）
            </summary>
            <typeparam name="TDatabaseLoggingWriter">实现自 <see cref="T:ThingsGateway.Logging.IDatabaseLoggingWriter" /></typeparam>
            <param name="builder">日志构建器</param>
            <param name="configuraionKey">获取配置文件对于的 Key</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder" /></returns>
        </member>
        <member name="T:System.Logging.LoggingMonitor">
            <summary>
            LoggingMonitor 日志拓展默认分类名
            </summary>
        </member>
        <member name="T:System.LoggingMonitorAttribute">
            <summary>
            强大的日志监听器
            </summary>
            <remarks>主要用于将请求的信息打印出来</remarks>
        </member>
        <member name="F:System.LoggingMonitorAttribute.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:System.LoggingMonitorAttribute.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="M:System.LoggingMonitorAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.LoggingMonitorAttribute.#ctor(ThingsGateway.Logging.LoggingMonitorSettings)">
            <summary>
            构造函数
            </summary>
            <param name="settings"></param>
        </member>
        <member name="P:System.LoggingMonitorAttribute.Title">
            <summary>
            日志标题
            </summary>
        </member>
        <member name="P:System.LoggingMonitorAttribute.WithReturnValue">
            <summary>
            是否记录返回值
            </summary>
            <remarks>bool 类型，默认输出</remarks>
        </member>
        <member name="P:System.LoggingMonitorAttribute.ReturnValueThreshold">
            <summary>
            设置返回值阈值
            </summary>
            <remarks>配置返回值字符串阈值，超过这个阈值将截断，默认全量输出</remarks>
        </member>
        <member name="P:System.LoggingMonitorAttribute.JsonBehavior">
            <summary>
            配置 Json 输出行为
            </summary>
        </member>
        <member name="P:System.LoggingMonitorAttribute.IgnorePropertyNames">
            <summary>
            配置序列化忽略的属性名称
            </summary>
        </member>
        <member name="P:System.LoggingMonitorAttribute.IgnorePropertyTypes">
            <summary>
            配置序列化忽略的属性类型
            </summary>
        </member>
        <member name="P:System.LoggingMonitorAttribute.JsonIndented">
            <summary>
            JSON 输出格式化
            </summary>
            <remarks>bool 类型，默认输出</remarks>
        </member>
        <member name="P:System.LoggingMonitorAttribute.LongTypeConverter">
            <summary>
            是否处理 Long 转 String
            </summary>
            <remarks>bool 类型，默认 false</remarks>
        </member>
        <member name="P:System.LoggingMonitorAttribute.ContractResolver">
            <summary>
            序列化属性命名规则（返回值）
            </summary>
        </member>
        <member name="P:System.LoggingMonitorAttribute.Settings">
            <summary>
            配置信息
            </summary>
        </member>
        <member name="M:System.LoggingMonitorAttribute.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            监视 Action 执行
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.OnPageHandlerSelectionAsync(Microsoft.AspNetCore.Mvc.Filters.PageHandlerSelectedContext)">
            <summary>
            模型绑定拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GenerateAuthorizationTemplate(System.Text.Json.Utf8JsonWriter,System.Security.Claims.ClaimsPrincipal,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            生成 JWT 授权信息日志模板
            </summary>
            <param name="writer"></param>
            <param name="claimsPrincipal"></param>
            <param name="authorization"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GenerateRequestHeadersTemplate(System.Text.Json.Utf8JsonWriter,Microsoft.AspNetCore.Http.IHeaderDictionary)">
            <summary>
            生成请求头日志模板
            </summary>
            <param name="writer"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GenerateParameterTemplate(System.Text.Json.Utf8JsonWriter,System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.MethodInfo,Microsoft.Extensions.Primitives.StringValues,ThingsGateway.Logging.LoggingMonitorMethod)">
            <summary>
            生成请求参数信息日志模板
            </summary>
            <param name="writer"></param>
            <param name="parameterValues"></param>
            <param name="method"></param>
            <param name="contentType"></param>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GenerateReturnInfomationTemplate(System.Text.Json.Utf8JsonWriter,System.Object,System.Reflection.MethodInfo,ThingsGateway.Logging.LoggingMonitorMethod)">
            <summary>
            生成返回值信息日志模板
            </summary>
            <param name="writer"></param>
            <param name="resultContext"></param>
            <param name="method"></param>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GenerateExcetpionInfomationTemplate(System.Text.Json.Utf8JsonWriter,System.Exception,System.Boolean)">
            <summary>
            生成异常信息日志模板
            </summary>
            <param name="writer"></param>
            <param name="exception"></param>
            <param name="isValidationException">是否是验证异常</param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.TrySerializeObject(System.Object,ThingsGateway.Logging.LoggingMonitorMethod,System.Boolean@)">
            <summary>
            序列化对象
            </summary>
            <param name="obj"></param>
            <param name="monitorMethod"></param>
            <param name="succeed"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.CheckIsSetWithReturnValue(ThingsGateway.Logging.LoggingMonitorMethod)">
            <summary>
            检查是否开启启用返回值
            </summary>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.CheckIsSetJsonIndented(ThingsGateway.Logging.LoggingMonitorMethod)">
            <summary>
            检查是否开启 JSON 格式化
            </summary>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.CheckIsSetLongTypeConverter(ThingsGateway.Logging.LoggingMonitorMethod)">
            <summary>
            检查是否开启 long 转 string
            </summary>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GetReturnValueThreshold(ThingsGateway.Logging.LoggingMonitorMethod)">
            <summary>
            获取返回值阈值
            </summary>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GetContractResolver(System.Object,ThingsGateway.Logging.LoggingMonitorMethod)">
            <summary>
            获取 序列化属性命名规则
            </summary>
            <param name="contractResolver"></param>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GetIgnorePropertyNames(ThingsGateway.Logging.LoggingMonitorMethod)">
            <summary>
            获取忽略序列化属性名称集合
            </summary>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.GetIgnorePropertyTypes(ThingsGateway.Logging.LoggingMonitorMethod)">
            <summary>
            获取忽略序列化属性类型集合
            </summary>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:System.LoggingMonitorAttribute.HandleGenericType(System.Type)">
            <summary>
            处理泛型类型转字符串打印问题
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:System.SuppressMonitorAttribute">
            <summary>
            控制跳过日志监视
            </summary>
            <remarks>作用于全局 <see cref="T:System.LoggingMonitorAttribute" /></remarks>
        </member>
        <member name="T:System.LoggerFormatter">
            <summary>
            日志格式化静态类
            </summary>
        </member>
        <member name="F:System.LoggerFormatter.Json">
            <summary>
            Json 输出格式化
            </summary>
        </member>
        <member name="F:System.LoggerFormatter.JsonIndented">
            <summary>
            Json 输出格式化
            </summary>
        </member>
        <member name="M:System.LoggerFormatter.WriteJson(ThingsGateway.Logging.LogMessage,System.Text.Json.Utf8JsonWriter)">
            <summary>
            写入 JSON
            </summary>
            <param name="logMsg"></param>
            <param name="writer"></param>
        </member>
        <member name="T:System.Text.Json.SystemTextJsonExtensions">
            <summary>
            System.Text.Json 拓展
            </summary>
        </member>
        <member name="M:System.Text.Json.SystemTextJsonExtensions.AddDateTimeTypeConverters(System.Collections.Generic.IList{System.Text.Json.Serialization.JsonConverter},System.String,System.Boolean)">
            <summary>
            添加 DateTime/DateTime?/DateTimeOffset/DateTimeOffset? 类型序列化处理
            </summary>
            <param name="converters"></param>
            <param name="outputFormat"></param>
            <param name="localized">自动转换 DateTimeOffset 为当地时间</param>
            <returns></returns>
        </member>
        <member name="M:System.Text.Json.SystemTextJsonExtensions.AddLongTypeConverters(System.Collections.Generic.IList{System.Text.Json.Serialization.JsonConverter},System.Boolean)">
            <summary>
            添加 long/long? 类型序列化处理
            </summary>
            <param name="converters"></param>
            <param name="overMaxLengthOf17">是否超过最大长度 17 再处理</param>
            <remarks></remarks>
        </member>
        <member name="M:System.Text.Json.SystemTextJsonExtensions.AddDateOnlyConverters(System.Collections.Generic.IList{System.Text.Json.Serialization.JsonConverter})">
            <summary>
            添加 DateOnly/DateOnly? 类型序列化处理
            </summary>
            <param name="converters"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.Json.SystemTextJsonExtensions.AddTimeOnlyConverters(System.Collections.Generic.IList{System.Text.Json.Serialization.JsonConverter})">
            <summary>
            添加 TimeOnly/TimeOnly? 类型序列化处理
            </summary>
            <param name="converters"></param>
            <returns></returns>
        </member>
        <member name="T:Newtonsoft.Json.NewtonsoftJsonExtensions">
            <summary>
            Newtonsoft.Json 拓展
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.NewtonsoftJsonExtensions.AddDateTimeTypeConverters(System.Collections.Generic.IList{Newtonsoft.Json.JsonConverter},System.String,System.Boolean)">
            <summary>
            添加 DateTime/DateTime?/DateTimeOffset/DateTimeOffset? 类型序列化处理
            </summary>
            <param name="converters"></param>
            <param name="outputFormat"></param>
            <param name="localized">自动转换 DateTimeOffset 为当地时间</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.NewtonsoftJsonExtensions.AddLongTypeConverters(System.Collections.Generic.IList{Newtonsoft.Json.JsonConverter},System.Boolean)">
            <summary>
            添加 long/long? 类型序列化处理
            </summary>
            <param name="converters"></param>
            <param name="overMaxLengthOf17">是否超过最大长度 17 再处理</param>
            <remarks></remarks>
        </member>
        <member name="M:Newtonsoft.Json.NewtonsoftJsonExtensions.AddDateOnlyConverters(System.Collections.Generic.IList{Newtonsoft.Json.JsonConverter})">
            <summary>
            添加 DateOnly/DateOnly? 类型序列化处理
            </summary>
            <param name="converters"></param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.NewtonsoftJsonExtensions.AddTimeOnlyConverters(System.Collections.Generic.IList{Newtonsoft.Json.JsonConverter})">
            <summary>
            添加 TimeOnly/TimeOnly? 类型序列化处理
            </summary>
            <param name="converters"></param>
            <returns></returns>
        </member>
    </members>
</doc>