@*
//------------------------------------------------------------------------------
//  此代码版权声明为全文件覆盖，如有原作者特别声明，会在下方手动补充
//  此代码版权（除特别声明外的代码）归作者本人Diego所有
//  源代码使用协议遵循本仓库的开源协议及附加协议
//  Gitee源代码仓库：https://gitee.com/diego2098/ThingsGateway
//  Github源代码仓库：https://github.com/kimdiego2098/ThingsGateway
//  使用文档：https://diego2098.gitee.io/thingsgateway/
//  QQ群：605534569
//------------------------------------------------------------------------------
*@

@namespace ThingsGateway.Web.Page
@using System.Linq.Expressions;
@using BlazorComponent;
@using Furion.DataValidation;
@using Mapster;
@using Masa.Blazor.Presets;
@using System.IO;
@using TouchSocket.Core;
@inject MasaBlazor MasaBlazor
@inherits CultureComponentBase
@inject UserResoures UserResoures

<PModal @bind-Value="IsShowImport" OnCancel="() => IsShowImport = false"
        Title=@T("导入") Persistent
        MaxWidth="1000">
    @if (IsShowImport)
    {
        <MStepper NonLinear Value="Step">
            <MStepperHeader>
                <MStepperStep Editable Step="1" Complete="Step==2" OnClick="()=>{Step=1;_importFile=null;}">
                    @T("导入表格")
                </MStepperStep>
                <MDivider></MDivider>
                <MStepperStep Step="2">
                    @T("验证结果")
                </MStepperStep>
                <MDivider></MDivider>
                <MStepperStep Step="3">
                    @T("确认导入")
                </MStepperStep>
            </MStepperHeader>

            <MStepperItems>
                <MStepperContent Step="1">
                    <MFileInput @bind-Value="_importFile" FullWidth ShowSize></MFileInput>

                    <div class="mt-6">
                        <MButton Color="primary" Loading=@isImport OnClick="()=>DeviceImport(_importFile)">@T("下一步")</MButton>
                    </div>

                </MStepperContent>
                <MStepperContent Step="2">
                    <div style="overflow-y:auto">
                        @foreach (var item in ImportPreviews)
                        {
                            <MSubheader Class="mt-2 font-weight-black"> @($"{item.Key}，预计导入{item.Value.DataCount}条数据")  </MSubheader>
                            if (item.Value.HasError)
                            {
                                <div class="mb-3 red--text">@T("请检查错误") </div>
                                <div class="red--text">@item.Value.ErrorStr</div>

                            }
                            else
                            {
                                <div class="green--text">@T("验证无错误") </div>
                            }
                        }
                    </div>
                    <div class="mt-6">
                        <MButton Color="primary" Disabled=@ImportPreviews.Any(it=>it.Value.HasError) OnClick="()=>Step=3">@T("下一步")</MButton>
                    </div>


                </MStepperContent>
                <MStepperContent Step="3">

                    <MLabel Class="my-3 green--text">@T("数据量较大时(大于1万)，所需导入时间可能超过1分钟，请耐心等待") </MLabel>

                    <div class="mt-6">
                        <MButton Color="primary" Loading=@isSaveImport OnClick="SaveDeviceImport">@T("上传")</MButton>
                    </div>

                </MStepperContent>
            </MStepperItems>
        </MStepper>
    }

</PModal>



@code {
    [Inject]
    IJSRuntime JS { get; set; }
    IBrowserFile _importFile;
    [Parameter]
    public int Step { get; set; }
    public bool IsShowImport { get; set; }
    bool isImport; bool isSaveImport;
    Dictionary<string, ImportPreviewOutputBase> ImportPreviews = new();

    [Parameter]
    public Func<Dictionary<string, ImportPreviewOutputBase>, Task> Import { get; set; }
    [Parameter]
    public Func<IBrowserFile, Task<Dictionary<string, ImportPreviewOutputBase>>> Preview { get; set; }


    async Task SaveDeviceImport()
    {
        try
        {
            isSaveImport = true;
            StateHasChanged();
            await Import.Invoke(ImportPreviews);
            _importFile = null;
            await PopupService.EnqueueSnackbarAsync(T("成功"), AlertTypes.Success);
        }
        finally
        {
            isSaveImport = false;
        }

    }
    async Task DeviceImport(IBrowserFile file)
    {
        try
        {
            isImport = true;
            StateHasChanged();
            ImportPreviews = await Preview.Invoke(file);
            Step = 2;
        }
        finally
        {
            isImport = false;
        }

    }
}
