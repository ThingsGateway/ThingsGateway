<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThingsGateway.Admin.ASPNetCore</name>
    </assembly>
    <members>
        <member name="T:ThingsGateway.Admin.Application.BlazorAuthenticationStateProvider">
            <inheritdoc/>
        </member>
        <member name="M:ThingsGateway.Admin.Application.BlazorAuthenticationStateProvider.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <inheritdoc/>
        </member>
        <member name="M:ThingsGateway.Admin.Application.BlazorAuthenticationStateProvider.PipelineAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.DefaultHttpContext)">
            <inheritdoc/>
        </member>
        <member name="M:ThingsGateway.Admin.Application.BlazorAuthenticationStateProvider.CheckVerificatFromCacheAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <summary>
            检查 BearerToken/Cookie 有效性
            </summary>
            <param name="context">DefaultHttpContext</param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Admin.Application.DatabaseLoggingWriter">
            <summary>
            数据库写入器
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.DatabaseLoggingWriter._operateLogMessageQueue">
            <summary>
            日志消息队列（线程安全）
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.DatabaseLoggingWriter.WriteAsync(ThingsGateway.Logging.LogMessage,System.Boolean)">
            <summary>
            此方法只会写入经由MVCFilter捕捉的方法日志，对于BlazorServer的内部操作，由<see cref="T:ThingsGateway.Admin.Application.OperDescAttribute"/>执行
            </summary>
            <param name="logMsg"></param>
            <param name="flush"></param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.DatabaseLoggingWriter.CreateOperationLog(System.String,System.String,ThingsGateway.ASPNetCore.LoggingMonitorJson,UAParser.ClientInfo,System.Boolean)">
            <summary>
            创建操作日志
            </summary>
            <param name="operation">操作名称</param>
            <param name="path">请求地址</param>
            <param name="loggingMonitor">loggingMonitor</param>
            <param name="clientInfo">客户端信息</param>
            <param name="flush"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.DatabaseLoggingWriter.CreateVisitLog(System.String,System.String,ThingsGateway.ASPNetCore.LoggingMonitorJson,UAParser.ClientInfo,System.Boolean)">
            <summary>
            创建访问日志
            </summary>
            <param name="operation">访问类型</param>
            <param name="path"></param>
            <param name="loggingMonitor">loggingMonitor</param>
            <param name="clientInfo">客户端信息</param>
            <param name="flush"></param>
        </member>
        <member name="T:ThingsGateway.Admin.Application.CultureController">
            <summary>
            文化 Controller
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.CultureController.ResetCulture(System.String)">
            <summary>
            重置文化方法
            </summary>
            <param name="redirectUri"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.CultureController.SetCulture(System.String,System.String)">
            <summary>
            设置文化方法
            </summary>
            <param name="culture"></param>
            <param name="redirectUri"></param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Admin.Application.FileController">
            <summary>
            文件下载
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.FileController.Download(System.String)">
            <summary>
            下载wwwroot文件夹下的文件
            </summary>
            <param name="fileName">相对路径</param>
            <returns></returns>
        </member>
        <member name="T:ThingsGateway.Admin.Application.OpenApiController">
            <summary>
            登录
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthRazorService.LoginAsync(ThingsGateway.Admin.Application.LoginInput)">
            <summary>
            用户登录
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthRazorService.LoginOutAsync">
            <summary>
            注销当前用户
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthService.LoginAsync(ThingsGateway.Admin.Application.LoginInput,System.Boolean)">
            <summary>
            登录
            </summary>
            <param name="input">登录参数</param>
            <param name="isCookie">cookie方式登录</param>
            <returns>登录输出</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthService.LoginOutAsync">
            <summary>
            注销当前用户
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthService.BeforeLogin(ThingsGateway.Admin.Application.AppConfig,System.String)">
            <summary>
            登录之前执行的方法
            </summary>
            <param name="appConfig">配置</param>
            <param name="userName">用户名称</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthService.ExecLogin(ThingsGateway.Admin.Application.LoginPolicy,ThingsGateway.Admin.Application.LoginInput,ThingsGateway.Admin.Application.SysUser,System.Boolean)">
            <summary>
            执行登录
            </summary>
            <param name="loginPolicy">登录策略</param>
            <param name="input">用户登录参数</param>
            <param name="sysUser">用户信息</param>
            <param name="isCookie">cookie方式登录</param>
            <returns>登录输出结果</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthService.LoginError(ThingsGateway.Admin.Application.LoginPolicy,System.String)">
            <summary>
            登录错误反馈
            </summary>
            <param name="loginPolicy">登录策略</param>
            <param name="userName">用户名称</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthService.RemoveTokenFromCache(ThingsGateway.Admin.Application.LoginEvent)">
            <summary>
            从cache删除用户verificat
            </summary>
            <param name="loginEvent">登录事件参数</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthService.SingleLogin(System.Int64)">
            <summary>
            单用户登录通知用户下线
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthService.UpdateUser(ThingsGateway.Admin.Application.LoginEvent)">
            <summary>
            登录事件
            </summary>
            <param name="loginEvent"></param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.AuthService.WriteTokenToCache(ThingsGateway.Admin.Application.LoginPolicy,ThingsGateway.Admin.Application.LoginEvent)">
            <summary>
            写入用户verificat到cache
            </summary>
            <param name="loginPolicy">登录策略</param>
            <param name="loginEvent">登录事件参数</param>
        </member>
        <member name="T:ThingsGateway.Admin.Application.LoginEvent">
            <summary>
            登录事件参数
            </summary>
        </member>
        <member name="F:ThingsGateway.Admin.Application.LoginEvent.DateTime">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginEvent.Device">
            <summary>
            登录设备
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginEvent.Expire">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginEvent.Ip">
            <summary>
            Ip地址
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginEvent.SysUser">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="P:ThingsGateway.Admin.Application.LoginEvent.VerificatId">
            <summary>
            VerificatId
            </summary>
        </member>
        <member name="M:ThingsGateway.Admin.Application.FileService.GetFileStreamResult(System.String,System.String,System.Boolean)">
            <summary>
            获取本地存储文件流
            </summary>
            <param name="path">文件夹</param>
            <param name="fileName">文件名称</param>
            <param name="isPathFolder">第一个参数是否是包含文件名称的全路径</param>
            <returns>文件流</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.FileService.GetFileStreamResult(System.Byte[],System.String)">
            <summary>
            按字节数组转为文件流
            </summary>
            <param name="byteArray">字节数组</param>
            <param name="fileName">文件名称</param>
            <returns>文件流</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.FileService.UploadFileAsync(Microsoft.AspNetCore.Components.Forms.IBrowserFile,System.String)">
            <summary>
            上传文件，保存在磁盘中
            </summary>
            <param name="pPath">保存路径</param>
            <param name="file">文件</param>
            <returns>最终全路径</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.FileService.Verification(Microsoft.AspNetCore.Components.Forms.IBrowserFile,System.Int32,System.String[])">
            <summary>
            验证文件信息
            </summary>
            <param name="file">文件</param>
            <param name="maxSize">最大文件大小</param>
            <param name="allowTypes">扩展名称匹配</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.IFileService.GetFileStreamResult(System.String,System.String,System.Boolean)">
            <summary>
            获取本地存储文件流
            </summary>
            <param name="path">文件夹路径</param>
            <param name="fileName">文件名称</param>
            <param name="isPathFolder">路径是否包含文件名称</param>
            <returns>文件流</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.IFileService.GetFileStreamResult(System.Byte[],System.String)">
            <summary>
            按字节数组转为文件流
            </summary>
            <param name="byteArray">字节数组</param>
            <param name="fileName">文件名称</param>
            <returns>文件流</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.IFileService.UploadFileAsync(Microsoft.AspNetCore.Components.Forms.IBrowserFile,System.String)">
            <summary>
            上传文件，保存在磁盘中
            </summary>
            <param name="pPath">保存路径</param>
            <param name="file">文件流</param>
            <returns>最终全路径</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.IFileService.Verification(Microsoft.AspNetCore.Components.Forms.IBrowserFile,System.Int32,System.String[])">
            <summary>
            验证文件信息
            </summary>
            <param name="file">文件流</param>
            <param name="maxSize">最大文件大小（单位：MB）</param>
            <param name="allowTypes">允许上传的文件类型</param>
        </member>
        <member name="M:ThingsGateway.Admin.Application.IImportExportService.ExportAsync``1(System.Object,System.String,System.Boolean)">
            <summary>
            导出excel文件流
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="input">实体对象或者IDataReader</param>
            <param name="fileName">文件名称</param>
            <param name="isDynamicExcelColumn">动态excel列，根据实体的<see cref="T:ThingsGateway.Core.IgnoreExcelAttribute"/>属性判断是否生成 </param>
            <returns>导出的文件流</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.IImportExportService.GetUrlEncodeFileName(System.String)">
            <summary>
            获取文件名，默认xlsx类型
            </summary>
            <param name="fileName">文件名称，不含类型名称的话默认xlsx</param>
            <returns>编码后的文件名</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.IImportExportService.UploadFileAsync(Microsoft.AspNetCore.Components.Forms.IBrowserFile)">
            <summary>
            上传文件
            </summary>
            <param name="file">文件</param>
            <returns>保存全路径</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ImportExportService.ExportAsync``1(System.Object,System.String,System.Boolean)">
            <summary>
            导出excel文件流
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="input">实体对象或者IDataReader</param>
            <param name="fileName">文件名称</param>
            <param name="isDynamicExcelColumn">动态excel列，根据实体的<see cref="T:ThingsGateway.Core.IgnoreExcelAttribute"/>属性判断是否生成 </param>
            <returns></returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ImportExportService.UploadFileAsync(Microsoft.AspNetCore.Components.Forms.IBrowserFile)">
            <summary>
            上传文件
            </summary>
            <param name="file">文件</param>
            <returns>保存全路径</returns>
        </member>
        <member name="M:ThingsGateway.Admin.Application.ImportExportService.GetUrlEncodeFileName(System.String)">
            <summary>
            获取文件名，默认xlsx类型
            </summary>
            <param name="fileName">文件名称，不含类型名称的话默认xlsx</param>
            <returns></returns>
        </member>
        <member name="M:ApiPermissionService.ApiPermissionTreeSelector">
            <inheritdoc />
        </member>
    </members>
</doc>
